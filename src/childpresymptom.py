#!/opt/virtualenvs/ihme-va/bin/pythonw

import csv
import string
import wx
import copy
import workerthread
import os
from datetime import date
from dateutil.relativedelta import relativedelta
from defaultfill import child_defaultFill
from answer_ranges import child_rangelist
from presymptom_conversions import child_conversionVars
from word_conversions import child_wordsToVars

# NOTES:
# these variables don't exist in the electronic version of the form:
# c1_09, c1_10, c1_10d, c1_10m, c1_10y, c1_19_6, c1_24,	c1_24d,	c1_24m,	c1_24y,	c1_26, c4_31_2, c5_02_11b


# new headers generated by this step in processing
generatedHeaders = ['g4_03b', 'c1_05b', 'c1_20b', 'c1_21b', 'c2_05b', 'c4_37b', 'c4_47_11', 'c4_49b', 'c1_25a', 's180', 's181']


class PreSymptomPrep():
    def __init__(self, notify_window, input_file, output_dir):
        self._notify_window = notify_window
        self.inputFilePath = input_file
        self.output_dir = output_dir

    def run(self):
        reader = csv.reader(open( self.inputFilePath, 'rb'))
        childwriter = csv.writer(open(self.output_dir + os.sep + 'child-presymptom.csv', 'wb', buffering=0))
        
        
        updatestr = "Processing child presymptom data\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        
        
        matrix = list()
        headers = list()
    
        first = 1
        # read in new .csv for processing
        # we add the generated headers later this time
        for row in reader:
            if first == 1:
                for col in row: 
                    headers.append(col)
                first = 0
                    
            else:
                matrix.append(row)
                
        # drop all adult variables
        # must iterate over a copy because we can't change values in a list we're iterating over
        headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col.startswith("a") and col != "agedays":
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)
        
        #make a copy of the new list
        headers_old = copy.deepcopy(headers)
                                  
        # verify that answer is within legal bounds
        error = 0
        updatestr = "Verifying answers fall within legal bounds\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr)) 
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                if col != '':
                    # if it's empty, we just skip it.  not sure there's a "required"
                    rangetest = child_rangelist.get(header)
                    if rangetest is not None and col not in child_rangelist.get(header):
                        #ERROR
                        updatestr = "value %s in row %s for col %s is not legal, please see Codebook for legal values" % (col, i, header)
                        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                        
        if error == 0:
            updatestr = "answers verified\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        else:
            updatestr = "Errors found, not continuing\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))    
            return 0
                    
        #TODO:  yaw did this?
        #Test skip patterns
        # for i, row in enumerate(matrix):
        #     var = "g1_08"
        #     index = headers.index(var)
        #     testvar = "g1_07a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #    
        #     var = "g5_05"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06a"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06b"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #           
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #     
        #     var = "a2_03b"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_04"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     
        #     var = "a2_05"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_06"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #             
        #             
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #
        
        #'child_4_50b' should be set to 1000 if it's missing
        for row in matrix:
            if row[headers.index('child_4_50b')] == '' or row[headers.index('child_4_50b')] == None:
               row[headers.index('child_4_50b')] = 1000      
                    
        
        # fill in missing values:
        updatestr = "Filling in default values for empty columns\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                default = child_defaultFill.get(header)
                if default is not None and col == '':
                        row[i] = child_defaultFill[header]
        
        #switch to new variables:
        for i, col in enumerate(headers):
            #only swap headers with values to swap
            try:
                swap = child_conversionVars[col]
                headers[i] = swap
            except KeyError:
                i = 1 # noop
        
        #add new headers:
        for newheader in generatedHeaders:
            headers.append(newheader)
                    
        #create the placeholders in our matrix for new headers
        for row in matrix:
            for h in generatedHeaders:
                row.append("0")    
                
                        
        updatestr = "Analyzing free text\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        freeText = ['c5_09',  'c5_12', 'c5_13', 'c5_14', 'c5_15', 'c5_16', 'c6_01', 'c6_02', 'c6_02', 'c6_03']
        
        
        
        #TODO figure out accident...
        keyWords = child_wordsToVars.keys()
        
        for question in freeText:
            index = headers.index(question)
            for row in matrix:
                answer = row[index]
                answerArray = answer.split(' ')
                for word in answerArray:
                    for keyword in keyWords:
                        if word.lower().startswith(keyword):
                            svar = child_wordsToVars[keyword.lower()]
                            sindex = headers.index(svar)
                            row[sindex] = '1'
                        
        
                
        #now do the calculations for the generated variables:
        for row in matrix:
            index = headers.index('g4_03b')
            if row[headers.index('g4_03a')] == str(11):
                row[index] = row[headers_old.index('gen_4_3a')]
            elif row[headers.index('g4_03a')] == str(12):
                row[index] = row[headers_old.index('gen_4_3b')]
            elif  row[headers.index('g4_03a')] == str(13):
                row[index] = row[headers_old.index('gen_4_3c')]
                
            index = headers.index('c1_05b')
            if row[headers.index('c1_05a')] == str(4):
                row[index] = row[headers_old.index('child_1_5a')]
            if row[headers.index('c1_05a')] == str(2):
                row[index] = row[headers_old.index('child_1_5b')]
                
            index = headers.index('c1_20b')
            if row[headers.index('c1_20a')] == str(4):
                row[index] = row[headers_old.index('child_1_20a')]
            if row[headers.index('c1_20a')] == str(2):
                row[index] = row[headers_old.index('child_1_20b')]
            if row[headers.index('c1_20a')] == str(1):
                row[index] = row[headers_old.index('child_1_20c')]
                
            index = headers.index('c1_21b')
            if row[headers.index('c1_21a')] == str(4):
                row[index] = row[headers_old.index('child_1_21a')]
            if row[headers.index('c1_21a')] == str(2):
                row[index] = row[headers_old.index('child_1_21b')]
                
            index = headers.index('c2_05b')
            if row[headers.index('c2_05a')] == str(5):
                row[index] = row[headers_old.index('child_2_5a')]
            if row[headers.index('c2_05a')] == str(4):
                row[index] = row[headers_old.index('child_2_5a')]
                
            index = headers.index('c4_37b')
            if row[headers.index('c4_37a')] == str(4):
                row[index] = row[headers_old.index('child_4_37a')]
            if row[headers.index('c4_37a')] == str(3):
                row[index] = row[headers_old.index('child_4_37b')]
                
            if row[headers.index('child_4_47')] == str(0):
                row[headers.index('c4_47_11')] = 1
 
            index = headers.index('c4_49b')
            if row[headers.index('c4_49a')] == str(5):
                row[index] = row[headers_old.index('child_4_50a')]
            if row[headers.index('c4_49a')] == str(4):
                row[index] = row[headers_old.index('child_4_50b')]
                
                        
            # fix child agedays.  if it's blank give it a 0, if it's not, give it a 4
            if row[headers.index('c1_25b')] == '' or row[headers.index('c1_25b')] is None:
                row[headers.index('c1_25a')] = 0
            else:
                row[headers.index('c1_25a')] = 4
            
           
                
            
        #fix duration variables    
        updatestr = "Processing duration variables\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        durationVars = ['c1_05', 'c1_20', 'c1_21', 'c1_25', 'c2_02', 'c2_05', 'c2_10', 'c3_14', 'c3_18', 'c3_19', 'c3_21', 'c3_22', 'c3_27', 'c3_28', 'c3_30', 'c3_31', 'c4_02', 'c4_08', 'c4_10', 'c4_13', 'c4_17', 'c4_19', 'c4_33', 'c4_37', 'c4_49']
            
        # add duration variables
        for var in durationVars:
            headers.append(var)
            for row in matrix:
                row.append("")
                    
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            bindex = headers.index(b)
            index = headers.index(var)
                        
            for row in matrix:
                value = row[bindex]
                v2 = row[aindex]
                                    
                if value == '':
                    row[index] = 0
                else:
                    row[index] = float(value)
                if row[aindex] == str(1):
                    row[index] = float(row[index]) * 365.0
                if row[aindex] == str(2):
                    row[index] = float(row[index]) * 30.0
                if row[aindex] == str(3):
                    row[index] = float(row[index]) * 7.0
                if row[aindex] == str(5):
                    row[index] = float(row[index]) / 24.0
                if row[aindex] == str(6):
                    row[index] = float(row[index]) / 1440.0
                    
        # drop old a/b variables
        # we do two loops to make sure we don't cross indexes, inefficient...
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            headers.remove(a)
   
            for row in matrix:
                del row[aindex]
                
            bindex = headers.index(b)
            headers.remove(b)
            for row in matrix:
                del row[bindex]
                
                
        #fix missingness coding for weight from medical record
        for row in matrix:
            c5_07_1b = headers.index('c5_07_1b')
            c5_07_2b = headers.index('c5_07_2b')
            if (row[c5_07_1b] == '0' or row[c5_07_1b] == '9999' or row[c5_07_1b] == '99' or row[c5_07_1b] == '999'):
                row[c5_07_1b] = ''
            if (row[c5_07_2b] == '0' or row[c5_07_2b] == '9999' or row[c5_07_2b] == '99' or row[c5_07_2b] == '999'):
                row[c5_07_2b] = ''
                
            #Date of birth - clean up so you can get at least an estimated age
            g5_01d = headers.index('g5_01d')
            if (row[g5_01d] == '99'):
                row[g5_01d] = 0
            g5_01m = headers.index('g5_01m')
            if (row[g5_01m] == '99'):
                row[g5_01m] = 0
            g5_01y = headers.index('g5_01y')
            if (row[g5_01y] == '999'):
                row[g5_01y] = 0
                
            #clean up medical record dates
            c5_06_1d = headers.index('c5_06_1d')
            if row[c5_06_1d] == '99' or row[c5_06_1d] == '' or row[c5_06_1d] == None:
                row[c5_06_1d] = 0
            c5_06_1m = headers.index('c5_06_1m')
            if row[c5_06_1m] == '99' or row[c5_06_1m] == '' or row[c5_06_1m] == None:
                row[c5_06_1m] = 0
            c5_06_1y = headers.index('c5_06_1y')
            if row[c5_06_1y] == '9999' or row[c5_06_1y] == '' or row[c5_06_1y] == None:
                row[c5_06_1y] = 0
            
            c5_06_2d = headers.index('c5_06_2d')
            if row[c5_06_2d] == '99' or row[c5_06_2d] == '' or row[c5_06_2d] == None:
                row[c5_06_2d] = 0
            c5_06_2m = headers.index('c5_06_2m')
            if row[c5_06_2m] == '99' or row[c5_06_2m] == '' or row[c5_06_2m] == None:
                row[c5_06_2m] = 0
            c5_06_2y = headers.index('c5_06_2y')
            if row[c5_06_2y] == '9999' or row[c5_06_2y] == '' or row[c5_06_2y] == None:
                row[c5_06_2y] = 0
            
            knownAge = True
            if row[g5_01y] == 0 and row[g5_01m] == 0 and row[g5_01d] == 0:
                knownAge = False
                
            if knownAge:
                #generate how many months after Jan 1 1960 they were born - This is a specific stata function
                #gen mofd = mofd(mdy(c1_10m, c1_10d, c1_10y))
                
                base_date = date(1960, 1, 1)
                delta = relativedelta(date(int(row[g5_01y]), int(row[g5_01m]), int(row[g5_01d])), base_date)
                mofd = delta.years*12 + delta.months
                
                mofm1 = -1
                mofm2 = -1
                if row[c5_06_1y] != 0 and int(row[c5_06_1m]) != 0 and int(row[c5_06_1d]) != 0:
                    exam1date = date(int(row[c5_06_1y]), int(row[c5_06_1m]), int(row[c5_06_1d]))
                    exam1delta = relativedelta(exam1date, base_date)
                    mofm1 = exam1delta.years * 12 + exam1delta.months
                    
                if row[c5_06_2y] != 0 and int(row[c5_06_2m]) != 0 and int(row[c5_06_2d]) != 0:
                    exam2date = date(int(row[c5_06_2y]), int(row[c5_06_2m]), int(row[c5_06_2d]))
                    exam2delta = relativedelta(exam2date, base_date)
                    mofm2 = exam2delta.years * 12 + exam2delta.months
            
                
                #identify most recent medical record
                #gen max_age = max(mofm1, mofm2)
                max_age = max(age_at_e1, age_at_e2)
                
                month = max_age - mofd
                
                # only keep going if they have a positive age
                if month >= 0:
            
                    # only neonate
                    #if row[headers.index('c5_07_2b')] == '' or row[headers.index('c5_07_2b')] == None or row[headers.index('c5_07_1b')] == '' or row[headers.index('c5_07_1b')] == None:
                    #    month = 0
        
                    #only child
                    weight_kg = 0
                    if max_age == age_at_e1:
                        weight_kg = float(row[headers.index('c5_07_1b')])/1000
                    elif max_age == age_at_e2:
                        weight_kg = float(row[headers.index('c5_07_2b')])/1000
            
            
                    # input months, output 3rd standard deviation below
                    male_sd3 = {}
      
                    female_sd3 = {}
        
                    male_sd2 = {0 : 2.5, 1 : 3.4, 2 : 4.3, 3 : 5, 4 : 5.6, 5 : 6, 6 : 6.4, 7 : 6.7, 8 : 6.9, 9 : 7.1, 10 : 7.4, 11 : 7.6, 12 : 7.7, 13 : 7.9, 14 : 8.1, 15 : 8.3, 16 : 8.4, 17 : 8.6, 18 : 8.8, 19 : 8.9, 20 : 9.1, 21 : 9.2, 22 : 9.4, 23 : 9.5, 24 : 9.7, 25 : 9.8, 26 : 10, 27 : 10.1, 28 : 10.2, 29 : 10.4, 30 : 10.5, 31 : 10.7, 32 : 10.8, 33 : 10.9, 34 : 11, 35 : 11.2, 36 : 11.3, 37 : 11.4, 38 : 11.5, 39 : 11.6, 40 : 11.8, 41 : 11.9, 42 : 12, 43 : 12.1, 44 : 12.2, 45 : 12.4, 46 : 12.5, 47 : 12.6, 48 : 12.7, 49 : 12.8, 50 : 12.9, 51 : 13.1, 52 : 13.2, 53 : 13.3, 54 : 13.4, 55 : 13.5, 56 : 13.6, 57 : 13.7, 58 : 13.8, 59 : 14, 60 : 14.1}

                    female_sd2 = {0 : 2.4, 1 : 3.2, 2 : 3.9, 3 : 4.5, 4 : 5, 5 : 5.4, 6 : 5.7, 7 : 6, 8 : 6.3, 9 : 6.5, 10 : 6.7, 11 : 6.9, 12 : 7, 13 : 7.2, 14 : 7.4, 15 : 7.6, 16 : 7.7, 17 : 7.9, 18 : 8.1, 19 : 8.2, 20 : 8.4, 21 : 8.6, 22 : 8.7, 23 : 8.9, 24 : 9, 25 : 9.2, 26 : 9.4, 27 : 9.5, 28 : 9.7, 29 : 9.8, 30 : 10, 31 : 10.1, 32 : 10.3, 33 : 10.4, 34 : 10.5, 35 : 10.7, 36 : 10.8, 37 : 10.9, 38 : 11.1, 39 : 11.2, 40 : 11.3, 41 : 11.5, 42 : 11.6, 43 : 11.7, 44 : 11.8, 45 : 12, 46 : 12.1, 47 : 12.2, 48 : 12.3, 49 : 12.4, 50 : 12.6, 51 : 12.7, 52 : 12.8, 53 : 12.9, 54 : 13, 55 : 13.2, 56 : 13.3, 57 : 13.4, 58 : 13.5, 59 : 13.6, 60 : 13.7}
            
                    sex = row[headers.index('g5_02')]
                    if sex == 1:
                        if weight_kg < male_sd3[max_age]:
                            row[headers.index('s181')] = 1
                        if weight_kg < male_sd2[max_age]:
                            row[headers.index('s180')] = 1
                    elif sex == 2:
                        if weight_kg < female_sd3[max_age]:
                            row[headers.index('s181')] = 1
                        if weight_kg < female_sd2[max_age]:
                            row[headers.index('s180')] = 1

            #only neonate
            # if (row[headers.index('c5_07_1b')] >= row[headers.index('c5_07_2b')]):
            #                 weight_kg = float(row[headers.index('c5_07_1b')])/1000
            #             else:
            #                 weight_kg = float(row[headers.index('c5_07_2b')])/1000

            # then do the weight/age comparison thing
            

            

        #     local Adult_durs "a2_01 a2_03 a2_08 a2_15 a2_22 a2_24 a2_26 a2_28 a2_33 a2_37 a2_41 a2_48 a2_54 a2_58 a2_62 a2_65 a2_68 a2_70 a2_73 a2_76 a2_79 a2_83 a2_86 a3_08 a3_11 a3_16 a5_04"
        # local Child_durs "c1_05 c1_20 c1_21 c1_25 c2_02 c2_05 c2_10 c3_14 c3_18 c3_19 c3_21 c3_22 c3_27 c3_28 c3_30 c3_31 c4_02 c4_08 c4_10 c4_13 c4_17 c4_19 c4_33 c4_37 c4_49"
        # foreach var of local `module'_durs {
        #     gen `var' = `var'b
        #     replace `var' = `var' * 365 if `var'a == 1
        #     replace `var' = `var' * 30 if `var'a == 2
        #     replace `var' = `var' * 7 if `var'a == 3
        #     replace `var' = `var' / 24 if `var'a == 5
        #     replace `var' = `var' / 1440 if `var'a == 6
        #     order `var', before(`var'a)
        #     local name : variable label `var'b
        #     local name = "`name' [days]"
        #     label variable `var' "`name'"
        #     drop `var'a `var'b
        # }
		    
		# end loop
 
                        
        childwriter.writerow(headers)
        
        for row in matrix:
            childwriter.writerow(row)
                    
        return 1    	
        
        