#!/opt/virtualenvs/ihme-va/bin/pythonw

import csv
import string
import wx
import copy
import workerthread
import os
from datetime import date
from dateutil.relativedelta import relativedelta

# NOTES:
# these variables don't exist in the electronic version of the form:
# c1_09, c1_10, c1_10d, c1_10m, c1_10y, c1_19_6, c1_24,	c1_24d,	c1_24m,	c1_24y,	c1_25,	c1_26, c4_31_2, c5_02_11b


# new headers generated by this step in processing
generatedHeaders = ['g4_03b', 'c1_05b', 'c1_20b', 'c1_21b', 'c2_05b', 'c4_37b', 'c4_47_11', 'c4_49b', 'c1_25a', 's180', 's181', 'c1_26']

# large dictionary mapping question variables to acceptible ranges of values for answers
rangelist = {'g1_01d':range(1, 31+1) + [99], 'g1_01m':range(1, 12+1) + [99], 'g1_01y':range(1900, 2013+1) + [9999], 'g1_05':[1, 2, 8, 9], 'g1_06d':range(1, 31+1) + [99], 'g1_06m':range(1, 12+1) + [99], 'g1_06y':range(1900,2013+1) + [9999], 'g1_07a':range(0, 120+1) + [999], 'g1_07b':range(0, 12+1) + [99], 'g1_07c':range(0, 31+1) + [99], 'g1_08':[1, 2, 3, 4, 5, 8, 9], 'g1_09':[1, 2, 3, 4, 9], 'g1_10':range(0, 99+1), 'g2_01':'', 'g2_02':'', 'g2_03ad':range(1, 31+1) + [99], 'g2_03am':range(1, 12+1) +[99], 'g2_03ay':range(1900, 2013+1) + [9999], 'g2_03bd':range(1,31+1) + [99], 'g2_03bm':range(1,12+1) + [99], 'g2_03by':range(1900, 2013+1) + [9999], 'g2_03cd':range(1, 31+1) + [99], 'g2_03cm':range(1, 12) + [99], 'g2_03cy':range(1900, 2013+1)  + [9999], 'g2_03dd':range(1,31+1) + [99], 'g2_03dm':range(1,12+1) + [99], 'g2_03dy':range(1900,2013+1) +[9999], 'g2_03ed':range(1,31+1) + [99], 'g2_03em':range(1, 12+1) + [99], 'g2_03ey':range(1900, 2013+1) +[9999], 'g2_03fd':range(1, 31+1) + [99], 'g2_03fm':range(1, 12+1) + [99], 'g2_03fy':range(1900, 2013+1) + [9999], 'g3_01':[0, 1, 8, 9], 'g4_02':[1, 2, 8, 9], 'g4_03a':[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99], 'g4_03b':'', 'g4_04':'', 'g4_05':[1, 2, 3, 4, 9], 'g4_06':'', 'g4_07':'', 'g4_08':[0, 1, 8, 9], 'g5_01d':range(1, 31+1) + [99], 'g5_01m':range(1, 12+1) + [99], 'g5_01y':range(1900, 2013 +1) + [999], 'g5_02':[1, 2, 8, 9], 'g5_03d':range(1, 31+1) + [99], 'g5_03m':range(1, 12+1) + [99], 'g5_03y':range(1900, 2013 +1) + [999], 'g5_04a':range(0, 120+1), 'g5_04b':range(0, 12+1), 'g5_04c':range(0, 28+1), 'g5_05':[1, 2, 3, 4, 5, 8, 9], 'g5_06a':[1, 2, 3, 4, 9], 'g5_06b':range (0, 99+1), 'g5_07':[0, 1, 8, 9], 'g5_08':'', 'c1_01':[1, 2, 8, 9], 'c1_02':[1, 2, 3, 8, 9], 'c1_03':[0, 1, 8, 9], 'c1_04':[1, 2, 8, 9], 'c1_05a':[1, 2, 3, 4, 5, 6, 8, 9], 'c1_05b':'', 'c1_06a':[1, 2, 3, 4, 5, 8, 9], 'c1_06b':'', 'c1_07':[1, 2, 3, 4, 8, 9], 'c1_08a':[1, 2, 8, 9], 'c1_08b':'', 'c1_09':[1, 2, 8, 9], 'c1_10':[1, 8, 9], 'c1_10d':range(1, 31+1) + [99], 'c1_10m':range(1, 12+1) + [99], 'c1_10y':range(1900, 2013 +1) + [9999], 'c1_11':[1, 2, 8, 9], 'c1_12':[0, 1, 8, 9], 'c1_13':[0, 1, 8, 9], 'c1_14':[0, 1, 8, 9], 'c1_15':[0, 1, 8, 9], 'c1_16':[0, 1, 8, 9], 'c1_17':[0, 1, 8, 9], 'c1_18':[0, 1, 8, 9], 'c1_19_1':[0, 1, 8, 9], 'c1_19_2':[0, 1, 8, 9], 'c1_19_3':[0, 1, 8, 9], 'c1_19_4a':[0, 1, 8, 9], 'c1_19_4b':'', 'c1_19_5':[0, 1, 8, 9], 'c1_19_6':[0, 1, 8, 9], 'c1_20a':[1, 2, 3, 4, 5, 6, 8, 9], 'c1_20b':'', 'c1_21a':[1, 2, 3, 4, 5, 6, 8, 9], 'c1_21b':'', 'c1_22a':[1, 2, 3, 4, 5, 8, 9], 'c1_22b':'', 'c1_23':'', 'c1_24':[1, 8, 9], 'c1_24d':range(1, 31+1) + [99], 'c1_24m':range(1, 12+1) + [99], 'c1_24y':range(1900, 2013 +1) + [9999], 'c1_25a':[1, 2, 3, 4, 5, 6, 8, 9], 'c1_25b':'', 'c1_26':[0, 1, 2], 'c2_01_1':[0, 1, 8, 9], 'c2_01_2':[0, 1, 8, 9], 'c2_01_3':[0, 1, 8, 9], 'c2_01_4':[0, 1, 8, 9], 'c2_01_5':[0, 1, 8, 9], 'c2_01_6':[0, 1, 8, 9], 'c2_01_7':[0, 1, 8, 9], 'c2_01_8':[0, 1, 8, 9], 'c2_01_9':[0, 1, 8, 9], 'c2_01_10':[0, 1, 8, 9], 'c2_01_11':[0, 1, 8, 9], 'c2_01_12':[0, 1, 8, 9], 'c2_01_13':'', 'c2_01_14':[0, 1, 8, 9], 'c2_02a':[1, 2, 3, 4, 5, 6, 8, 9], 'c2_02b':'', 'c2_03':[1, 2, 3, 8, 9], 'c2_04':[0, 1, 8, 9], 'c2_05a':[1, 2, 3, 4, 5, 6, 8, 9], 'c2_05b':'', 'c2_06':[1, 2, 8, 9], 'c2_07':[1, 2, 8, 9], 'c2_08a':[1, 2, 3, 8, 9], 'c2_08b':'', 'c2_09':[0, 1, 8, 9], 'c2_10a':[1, 2, 3, 4, 5, 6, 8, 9], 'c2_10b':'', 'c2_11':[0, 1, 8, 9], 'c2_12':[1, 2, 3, 4, 5, 8, 9], 'c2_13a':[1, 2, 3, 4, 5, 8, 9], 'c2_13b':'', 'c2_14':'', 'c2_15a':[1, 2, 3, 4, 5, 6, 8, 9], 'c2_15b':'', 'c2_17':[1, 2, 3, 4, 8, 9], 'c2_18':[0, 1, 8, 9], 'c3_01':[0, 1, 8, 9], 'c3_02':[0, 1, 8, 9], 'c3_03_1':[0, 1, 8, 9], 'c3_03_2':[0, 1, 8, 9], 'c3_03_3':[0, 1, 8, 9], 'c3_03_4a':[0, 1, 8, 9], 'c3_03_4b':'', 'c3_03_5':[0, 1, 8, 9], 'c3_03_6':[0, 1, 8, 9], 'c3_04':[0, 1, 8, 9], 'c3_05':[0, 1, 8, 9], 'c3_06':[0, 1, 8, 9], 'c3_07':[0, 1, 8, 9], 'c3_08':[1, 2, 3, 4, 8, 9], 'c3_09':[0, 1, 8, 9], 'c3_10':[1, 2, 8, 9], 'c3_11':[0, 1, 8, 9], 'c3_12':[0, 1, 8, 9], 'c3_13':[0, 1, 8, 9], 'c3_14a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_14b':'', 'c3_15':[1, 2, 8, 9], 'c3_16':[0, 1, 8, 9], 'c3_17':[0, 1, 8, 9], 'c3_18a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_18b':'', 'c3_19a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_19b':'', 'c3_20':[0, 1, 8, 9], 'c3_21a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_21b':'', 'c3_22a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_22b':'', 'c3_23':[0, 1, 8, 9], 'c3_24':[0, 1, 8, 9], 'c3_25':[0, 1, 8, 9], 'c3_26':[0, 1, 8, 9], 'c3_27a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_27b':'', 'c3_28a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_28b':'', 'c3_29':[0, 1, 8, 9], 'c3_30a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_30b':'', 'c3_31a':[1, 2, 3, 4, 5, 6, 8, 9], 'c3_31b':'', 'c3_32':[0, 1, 8, 9], 'c3_33':[0, 1, 8, 9], 'c3_34':[0, 1, 8, 9], 'c3_35':[0, 1, 8, 9], 'c3_36':[0, 1, 8, 9], 'c3_37':[0, 1, 8, 9], 'c3_38':[0, 1, 8, 9], 'c3_39':[0, 1, 8, 9], 'c3_40':[0, 1, 8, 9], 'c3_41':[0, 1, 8, 9], 'c3_42':[0, 1, 8, 9], 'c3_43':'', 'c3_44':[0, 1, 8, 9], 'c3_45a':[1, 8, 9], 'c3_45b':'', 'c3_46':[0, 1, 8, 9], 'c3_47':[0, 1, 8, 9], 'c3_48':[0, 1, 8, 9], 'c3_49':[0, 1, 8, 9], 'c4_01':[0, 1, 8, 9], 'c4_02a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_02b':'', 'c4_03':[0, 1, 8, 9], 'c4_04':[1, 2, 3, 8, 9], 'c4_05':[1, 2, 3, 8, 9], 'c4_06':[0, 1, 8, 9], 'c4_07a':[1, 8, 9], 'c4_07b':'', 'c4_08a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_08b':'', 'c4_09':[0, 1, 8, 9], 'c4_10a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_10b':'', 'c4_11':[0, 1, 8, 9], 'c4_12':[0, 1, 8, 9], 'c4_13a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_13b':'', 'c4_14':[0, 1, 8, 9], 'c4_15':[0, 1, 8, 9], 'c4_16':[0, 1, 8, 9], 'c4_17a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_17b':'', 'c4_18':[0, 1, 8, 9], 'c4_19a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_19b':'', 'c4_20':[0, 1, 8, 9], 'c4_22':[0, 1, 8, 9], 'c4_23':[0, 1, 8, 9], 'c4_24':[0, 1, 8, 9], 'c4_25':[0, 1, 8, 9], 'c4_26':[0, 1, 8, 9], 'c4_27':[1, 2, 3, 8, 9], 'c4_28':[0, 1, 8, 9], 'c4_29':[0, 1, 8, 9], 'c4_30':[0, 1, 8, 9], 'c4_31_1':[1, 2, 3, 4, 5, 8, 9], 'c4_31_2':[1, 2, 3, 4, 5, 8, 9], 'c4_32':[1, 2, 3, 4, 5, 8, 9], 'c4_33a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_33b':'', 'c4_34':[0, 1, 8, 9], 'c4_35':[0, 1, 8, 9], 'c4_36':[0, 1, 8, 9], 'c4_37a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_37b':'', 'c4_38':[0, 1, 8, 9], 'c4_39':[0, 1, 8, 9], 'c4_40':[0, 1, 8, 9], 'c4_41':[0, 1, 8, 9], 'c4_42':[0, 1, 8, 9], 'c4_43':[0, 1, 8, 9], 'c4_44':[0, 1, 8, 9], 'c4_45':'', 'c4_46':[0, 1, 8, 9], 'c4_47_1':[0, 1, 8, 9], 'c4_47_2':[0, 1, 8, 9], 'c4_47_3':[0, 1, 8, 9], 'c4_47_4':[0, 1, 8, 9], 'c4_47_5':[0, 1, 8, 9], 'c4_47_6':[0, 1, 8, 9], 'c4_47_7':[0, 1, 8, 9], 'c4_47_8a':[0, 1, 8, 9], 'c4_47_8b':'', 'c4_47_9':[0, 1, 8, 9], 'c4_47_10':[0, 1, 8, 9], 'c4_47_11':[0, 1, 8, 9], 'c4_48':[0, 1, 8, 9], 'c4_49a':[1, 2, 3, 4, 5, 6, 8, 9], 'c4_49b':'', 'c5_01':[0, 1, 8, 9], 'c5_02_1':[0, 1, 8, 9], 'c5_02_2':[0, 1, 8, 9], 'c5_02_3':[0, 1, 8, 9], 'c5_02_4':[0, 1, 8, 9], 'c5_02_5':[0, 1, 8, 9], 'c5_02_6':[0, 1, 8, 9], 'c5_02_7':[0, 1, 8, 9], 'c5_02_8':[0, 1, 8, 9], 'c5_02_9':[0, 1, 8, 9], 'c5_02_10':[0, 1, 8, 9], 'c5_02_11a':[0, 1, 8, 9], 'c5_02_11b':'', 'c5_02_12':[0, 1, 8, 9], 'c5_02_13':[0, 1, 8, 9], 'c5_02_14':[0, 1, 8, 9], 'c5_03':'', 'c5_04':[0, 1, 8, 9], 'c5_05':[0, 1, 8, 9], 'c5_06_1d':range(1, 31+1) + [99], 'c5_06_1m':range(1, 12+1) + [99], 'c5_06_1y':range(1900, 2013 +1) + [9999], 'c5_06_2d ':range(1, 31+1) + [99], 'c5_06_2m':range(1, 12+1) + [99], 'c5_06_2y':range(1900, 2013 +1) + [9999], 'c5_07_1a':[1, 2, 8, 9], 'c5_07_1b':'', 'c5_07_2a':[1, 2, 8, 9], 'c5_07_2b':'', 'c5_08d':range(1, 31+1) + [99], 'c5_08m':range(1, 12+1) + [99], 'c5_08y':range(1900, 2013 +1) + [9999], 'c5_09':'', 'c5_10':[0, 1, 8, 9], 'c5_11':[0, 1, 8, 9], 'c5_12':'', 'c5_13':'', 'c5_14':'', 'c5_15':'', 'c5_16':'', 'c5_17':[0, 1, 8, 9], 'c5_18':[0, 1, 8, 9], 'c5_19':[0, 1, 8, 9], 'c6_01':'', 'c6_02':'', 'c6_03':'', 'c6_04':'', 'c6_05':'', 'c6_06':'', 'c6_07':'', 'c6_08':'', 'c6_09':'', 'c6_10':'', 'c6_11':'', 'c6_12':'', 'c6_13':''}




# large dictionary of values to pre-fill if the answer is blank
defaultFill = {'g1_01d':'', 'g1_01m':'', 'g1_01y':'', 'g1_05':'', 'g1_06d':'', 'g1_06m':'', 'g1_06y':'', 'g1_07a':'', 'g1_07b':'', 'g1_07c':'', 'g1_08':1, 'g1_09':'', 'g1_10':'', 'g2_01':'', 'g2_02':'', 'g2_03ad':'', 'g2_03am':'', 'g2_03ay':'', 'g2_03bd':'', 'g2_03bm':'', 'g2_03by':'', 'g2_03cd':'', 'g2_03cm':'', 'g2_03cy':'', 'g2_03dd':'', 'g2_03dm':'', 'g2_03dy':'', 'g2_03ed':'', 'g2_03em':'', 'g2_03ey':'', 'g2_03fd':'', 'g2_03fm':'', 'g2_03fy':'', 'g3_01':'', 'g4_02':'', 'g4_03a':'', 'g4_03b':'', 'g4_04':'', 'g4_05':'', 'g4_06':'', 'g4_07':'', 'g4_08':'', 'g5_01d':'', 'g5_01m':'', 'g5_01y':'', 'g5_02':9, 'g5_03d':'', 'g5_03m':'', 'g5_03y':'', 'g5_04a':'', 'g5_04b':'', 'g5_04c':'', 'g5_05':1, 'g5_06a':1, 'g5_06b':0, 'g5_07':'', 'g5_08':'', 'c1_01':'', 'c1_02':9, 'c1_03':'', 'c1_04':9, 'c1_05a':1, 'c1_05b':0, 'c1_06a':'', 'c1_06b':'', 'c1_07':'', 'c1_08a':'', 'c1_08b':'', 'c1_09':'', 'c1_10':'', 'c1_10d':'', 'c1_10m':'', 'c1_10y':'', 'c1_11':'', 'c1_12':'', 'c1_13':'', 'c1_14':'', 'c1_15':'', 'c1_16':0, 'c1_17':0, 'c1_18':0, 'c1_19_1':0, 'c1_19_2':0, 'c1_19_3':0, 'c1_19_4a':0, 'c1_19_4b':'', 'c1_19_5':0, 'c1_19_6':0, 'c1_20a':1, 'c1_20b':0, 'c1_21a':1, 'c1_21b':0, 'c1_22a':9, 'c1_22b':'', 'c1_23':'', 'c1_24':1, 'c1_24d':99, 'c1_24m':99, 'c1_24y':9999, 'c1_25a':9, 'c1_25b':0, 'c1_26':0, 'c2_01_1':0, 'c2_01_2':0, 'c2_01_3':0, 'c2_01_4':0, 'c2_01_5':0, 'c2_01_6':0, 'c2_01_7':0, 'c2_01_8':0, 'c2_01_9':0, 'c2_01_10':0, 'c2_01_11':0, 'c2_01_12':0, 'c2_01_13':'', 'c2_01_14':0, 'c2_02a':1, 'c2_02b':0, 'c2_03':9, 'c2_04':0, 'c2_05a':1, 'c2_05b':0, 'c2_06':9, 'c2_07':9, 'c2_08a':9, 'c2_08b':'', 'c2_09':0, 'c2_10a':1, 'c2_10b':0, 'c2_11':0, 'c2_12':9, 'c2_13a':9, 'c2_13b':'', 'c2_14':'', 'c2_15a':9, 'c2_15b':'', 'c2_17':9, 'c2_18':0, 'c3_01':0, 'c3_02':0, 'c3_03_1':0, 'c3_03_2':0, 'c3_03_3':0, 'c3_03_4a':0, 'c3_03_4b':'', 'c3_03_5':0, 'c3_03_6':0, 'c3_04':0, 'c3_05':0, 'c3_06':0, 'c3_07':0, 'c3_08':9, 'c3_09':0, 'c3_10':9, 'c3_11':0, 'c3_12':1, 'c3_13':0, 'c3_14a':1, 'c3_14b':0, 'c3_15':9, 'c3_16':0, 'c3_17':0, 'c3_18a':1, 'c3_18b':0, 'c3_19a':1, 'c3_19b':0, 'c3_20':0, 'c3_21a':1, 'c3_21b':0, 'c3_22a':1, 'c3_22b':0, 'c3_23':0, 'c3_24':0, 'c3_25':0, 'c3_26':0, 'c3_27a':1, 'c3_27b':0, 'c3_28a':1, 'c3_28b':0, 'c3_29':0, 'c3_30a':1, 'c3_30b':0, 'c3_31a':1, 'c3_31b':0, 'c3_32':0, 'c3_33':0, 'c3_34':0, 'c3_35':0, 'c3_36':0, 'c3_37':0, 'c3_38':0, 'c3_39':0, 'c3_40':0, 'c3_41':0, 'c3_42':0, 'c3_43':'', 'c3_44':0, 'c3_45a':1, 'c3_45b':0, 'c3_46':0, 'c3_47':0, 'c3_48':0, 'c3_49':0, 'c4_01':0, 'c4_02a':1, 'c4_02b':0, 'c4_03':0, 'c4_04':9, 'c4_05':9, 'c4_06':0, 'c4_07a':1, 'c4_07b':0, 'c4_08a':1, 'c4_08b':0, 'c4_09':0, 'c4_10a':1, 'c4_10b':0, 'c4_11':0, 'c4_12':0, 'c4_13a':1, 'c4_13b':0, 'c4_14':0, 'c4_15':0, 'c4_16':0, 'c4_17a':1, 'c4_17b':0, 'c4_18':0, 'c4_19a':1, 'c4_19b':0, 'c4_20':0, 'c4_22':0, 'c4_23':0, 'c4_24':0, 'c4_25':0, 'c4_26':0, 'c4_27':9, 'c4_28':0, 'c4_29':0, 'c4_30':0, 'c4_31_1':9, 'c4_31_2':9, 'c4_32':9, 'c4_33a':1, 'c4_33b':0, 'c4_34':0, 'c4_35':0, 'c4_36':0, 'c4_37a':1, 'c4_37b':0, 'c4_38':0, 'c4_39':0, 'c4_40':0, 'c4_41':0, 'c4_42':0, 'c4_43':0, 'c4_44':0, 'c4_45':'', 'c4_46':0, 'c4_47_1':0, 'c4_47_2':0, 'c4_47_3':0, 'c4_47_4':0, 'c4_47_5':0, 'c4_47_6':0, 'c4_47_7':0, 'c4_47_8a':0, 'c4_47_8b':'', 'c4_47_9':0, 'c4_47_10':0, 'c4_47_11':0, 'c4_48':0, 'c4_49a':1, 'c4_49b':0, 'c5_01':0, 'c5_02_1':0, 'c5_02_2':0, 'c5_02_3':0, 'c5_02_4':0, 'c5_02_5':0, 'c5_02_6':0, 'c5_02_7':0, 'c5_02_8':0, 'c5_02_9':0, 'c5_02_10':0, 'c5_02_11a':0, 'c5_02_11b':'', 'c5_02_12':0, 'c5_02_13':0, 'c5_02_14':0, 'c5_03':'', 'c5_04':0, 'c5_05':0, 'c5_06_1d':99, 'c5_06_1m':99, 'c5_06_1y':9999, 'c5_06_2d ':99, 'c5_06_2m':99, 'c5_06_2y':9999, 'c5_07_1a':0, 'c5_07_1b':'', 'c5_07_2a':0, 'c5_07_2b':'', 'c5_08d':99, 'c5_08m':99, 'c5_08y':9999, 'c5_09':'', 'c5_10':'', 'c5_11':0, 'c5_12':'', 'c5_13':'', 'c5_14':'', 'c5_15':'', 'c5_16':'', 'c5_17':'', 'c5_18':0, 'c5_19':'', 'c6_01':'', 'c6_02':'', 'c6_03':'', 'c6_04':'', 'c6_05':'', 'c6_06':'', 'c6_07':'', 'c6_08':'', 'c6_09':'', 'c6_10':'', 'c6_11':'', 'c6_12':'', 'c6_13':''}

# dictionary converting variable/header names
conversionVars = {'sid':'sid', 'gen_2_1':'g2_01', 'gen_2_2a':'g2_02', 'gen_3_1':'g3_01', 'gen_4_2':'g4_02', 'gen_4_3':'g4_03a', 'gen_4_4':'g4_04', 'gen_4_5':'g4_05', 'gen_4_6':'g4_06', 'gen_4_7':'g4_07', 'gen_4_8':'g4_08', 'gen_5_1c':'g5_01d', 'gen_5_1b':'g5_01m', 'gen_5_1a':'g5_01y', 'gen_5_2':'g5_02', 'gen_5_3c':'g5_03d', 'gen_5_3b':'g5_03m', 'gen_5_3a':'g5_03y', 'gen_5_4a':'g5_04a', 'gen_5_4b':'g5_04b', 'gen_5_4c':'g5_04c', 'gen_5_5':'g5_05', 'gen_5_6':'g5_06a', 'gen_5_7':'g5_07', 'gen_5_8':'g5_08', 'child_1_1':'c1_01', 'child_1_2':'c1_02', 'child_1_3':'c1_03', 'child_1_4':'c1_04', 'child_1_5':'c1_05a', 'child_1_6':'c1_06a', 'child_1_6a':'c1_06b', 'child_1_7':'c1_07', 'child_1_8':'c1_08a', 'child_1_8a':'c1_08b', 'child_1_11':'c1_11', 'child_1_12':'c1_12', 'child_1_13':'c1_13', 'child_1_14':'c1_14', 'child_1_15':'c1_15', 'child_1_16':'c1_16', 'child_1_17':'c1_17', 'child_1_18':'c1_18', 'childabnorm1':'c1_19_1', 'childabnorm2':'c1_19_2', 'childabnorm3':'c1_19_3', 'childabnorm4':'c1_19_4a', 'child119a':'c1_19_4b', 'childabnorm5':'c1_19_5', 'child_1_20':'c1_20a', 'child_1_21':'c1_21a', 'child_1_22':'c1_22a', 'child_1_22a':'c1_22b', 'child_1_23':'c1_23', 'complications1':'c2_01_1', 'complications2':'c2_01_2', 'complications3':'c2_01_3', 'complications4':'c2_01_4', 'complications5':'c2_01_5', 'complications6':'c2_01_6', 'complications7':'c2_01_7', 'complications8':'c2_01_8', 'complications9':'c2_01_9', 'complications10':'c2_01_10', 'complications11':'c2_01_11', 'complications12':'c2_01_12', 'child_2_2':'c2_02a', 'child_2_2a':'c2_02b', 'child_2_3':'c2_03', 'child_2_4':'c2_04', 'child_2_5':'c2_05a', 'child_2_6':'c2_06', 'child_2_7':'c2_07', 'child_2_8':'c2_08a', 'child_2_8a':'c2_08b', 'child_2_9':'c2_09', 'child_2_10':'c2_10a', 'child_2_10a':'c2_10b', 'child_2_11':'c2_11', 'child_2_12':'c2_12', 'child_2_15':'c2_15a', 'child_2_15a':'c2_15b', 'child_2_17':'c2_17', 'child_2_18':'c2_18', 'child_3_1':'c3_01', 'child_3_2':'c3_02', 'childabnorm31':'c3_03_1', 'childabnorm32':'c3_03_2', 'childabnorm33':'c3_03_3', 'childabnorm34':'c3_03_4a', 'child_3_3a':'c3_03_4b', 'childabnorm35':'c3_03_5', 'child_3_4':'c3_04', 'child_3_5':'c3_05', 'child_3_6':'c3_06', 'child_3_7':'c3_07', 'child_3_8':'c3_08', 'child_3_9':'c3_09', 'child_3_10':'c3_10', 'child_3_11':'c3_11', 'child_3_12':'c3_12', 'child_3_13':'c3_13', 'child_3_14':'c3_14a', 'child_3_14a':'c3_14b', 'child_3_15':'c3_15', 'child_3_16':'c3_16', 'child_3_17':'c3_17', 'child_3_18':'c3_18a', 'child_3_18a':'c3_18b', 'child_3_19':'c3_19a', 'child_3_19a':'c3_19b', 'child_3_20':'c3_20', 'child_3_21':'c3_21a', 'child_3_21a':'c3_21b', 'child_3_22':'c3_22a', 'child_3_22a':'c3_22b', 'child_3_23':'c3_23', 'child_3_24':'c3_24', 'child_3_25':'c3_25', 'child_3_26':'c3_26', 'child_3_27':'c3_27a', 'child_3_27a':'c3_27b', 'child_3_28':'c3_28a', 'child_3_28a':'c3_28b', 'child_3_29':'c3_29', 'child_3_30':'c3_30a', 'child_3_30a':'c3_30b', 'child_3_31':'c3_31a', 'child_3_31a':'c3_31b', 'child_3_32':'c3_32', 'child_3_33':'c3_33', 'child_3_34':'c3_34', 'child_3_35':'c3_35', 'child_3_36':'c3_36', 'child_3_37':'c3_37', 'child_3_38':'c3_38', 'child_3_39':'c3_39', 'child_3_40':'c3_40', 'child_3_41':'c3_41', 'child_3_42':'c3_42', 'child_3_43':'c3_43', 'child_3_44':'c3_44', 'child_3_45':'c3_45a', 'child_3_45a':'c3_45b', 'child_3_46':'c3_46', 'child_3_47':'c3_47', 'child_3_48':'c3_48', 'child_3_49':'c3_49', 'child_4_1':'c4_01', 'child_4_2':'c4_02a', 'child_4_2a':'c4_02b', 'child_4_3':'c4_03', 'child_4_4':'c4_04', 'child_4_5':'c4_05', 'child_4_6':'c4_06', 'child_4_7':'c4_07a', 'child_4_7a':'c4_07b', 'child_4_8':'c4_08a', 'child_4_8a':'c4_08b', 'child_4_9':'c4_09', 'child_4_10':'c4_10a', 'child_4_10a':'c4_10b', 'child_4_11':'c4_11', 'child_4_12':'c4_12', 'child_4_13':'c4_13a', 'child_4_13a':'c4_13b', 'child_4_14':'c4_14', 'child_4_15':'c4_15', 'child_4_16':'c4_16', 'child_4_17':'c4_17a', 'child_4_17a':'c4_17b', 'child_4_18':'c4_18', 'child_4_19':'c4_19a', 'child_4_19a':'c4_19b', 'child_4_20':'c4_20', 'child_4_22':'c4_22', 'child_4_23':'c4_23', 'child_4_24':'c4_24', 'child_4_25':'c4_25', 'child_4_26':'c4_26', 'child_4_27':'c4_27', 'child_4_28':'c4_28', 'child_4_29':'c4_29', 'child_4_30':'c4_30', 'child_4_31':'c4_31_1', 'child_4_32':'c4_32', 'child_4_33':'c4_33a', 'child_4_33a':'c4_33b', 'child_4_34':'c4_34', 'child_4_35':'c4_35', 'child_4_36':'c4_36', 'child_4_37':'c4_37a', 'child_4_38':'c4_38', 'child_4_39':'c4_39', 'child_4_40':'c4_40', 'child_4_41':'c4_41', 'child_4_42':'c4_42', 'child_4_43':'c4_43', 'child_4_44':'c4_44', 'child_4_45':'c4_45', 'child_4_46':'c4_46', 'childinjury1':'c4_47_1', 'childinjury2':'c4_47_2', 'childinjury3':'c4_47_3', 'childinjury4':'c4_47_4', 'childinjury5':'c4_47_5', 'childinjury6':'c4_47_6', 'childinjury7':'c4_47_7', 'childinjury8':'c4_47_8a', 'child_4_48a':'c4_47_8b', 'childinjury10':'c4_47_9', 'childinjury9':'c4_47_10', 'child_4_49':'c4_48', 'child_4_50':'c4_49a', 'child_5_1':'c5_01', 'provider1':'c5_02_1', 'provider2':'c5_02_2', 'provider3':'c5_02_3', 'provider4':'c5_02_4', 'provider5':'c5_02_5', 'provider6':'c5_02_6', 'provider7':'c5_02_7', 'provider8':'c5_02_8', 'provider9':'c5_02_9', 'provider10':'c5_02_10', 'provider11':'c5_02_11a', 'provider12':'c5_02_12', 'provider13':'c5_02_13', 'provider14':'c5_02_14', 'child_5_3':'c5_03', 'child_5_4':'c5_04', 'child_5_5':'c5_05', 'child_5_6d':'c5_06_1d', 'child_5_6c':'c5_06_1m', 'child_5_6b':'c5_06_1y', 'child_5_7d':'c5_06_2d', 'child_5_7c':'c5_06_2m', 'child_5_7b':'c5_06_2y', 'child_5_6e':'c5_07_1a', 'child_5_6f':'c5_07_1b', 'child_5_7e':'c5_07_2a', 'child_5_7f':'c5_07_2b', 'child_5_8c':'c5_08d', 'child_5_8b':'c5_08m', 'child_5_8a':'c5_08y', 'child_5_9':'c5_09', 'child_5_10':'c5_10', 'child_5_11':'c5_11', 'child_5_12':'c5_12', 'child_5_13':'c5_13', 'child_5_14':'c5_14', 'child_5_15':'c5_15', 'child_5_16':'c5_16', 'child_5_17':'c5_17', 'child_5_18':'c5_18', 'child_5_19':'c5_19', 'c6_01':'c6_01', 'c6_02':'c6_02', 'c6_03':'c6_03', 'child_4_47':'child_4_47', 'agedays':'c1_25b'}




class PreSymptomPrep():
    def __init__(self, notify_window, input_file, output_dir):
        self._notify_window = notify_window
        self.inputFilePath = input_file
        self.output_dir = output_dir

    def run(self):
        reader = csv.reader(open( self.inputFilePath, 'rb'))
        childwriter = csv.writer(open(self.output_dir + os.sep + 'neonate-presymptom.csv', 'wb', buffering=0))
        
        
        updatestr = "Processing neonate presymptom data\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        
        
        matrix = list()
        headers = list()
    
        first = 1
        # read in new .csv for processing
        # we add the generated headers later this time
        for row in reader:
            if first == 1:
                for col in row:    
                    headers.append(col)
                first = 0
                    
            else:
                matrix.append(row)
                
        # drop all adult variables
        # must iterate over a copy because we can't change values in a list we're iterating over
        headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col.startswith("a") and col != "agedays":
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)
        
        #make a copy of the new list
        headers_old = copy.deepcopy(headers)
                                  
        # verify that answer is within legal bounds
        error = 0
        updatestr = "Verifying answers fall within legal bounds\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr)) 
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                if col != '':
                    # if it's empty, we just skip it.  not sure there's a "required"
                    rangetest = rangelist.get(header)
                    if rangetest is not None and col not in rangelist.get(header):
                        #ERROR
                        updatestr = "value %s in row %s for col %s is not legal, please see Codebook for legal values" % (col, i, header)
                        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        
        if error == 0:
            updatestr = "answers verified\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        else:
            updatestr = "Errors found, not continuing\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))    
            return 0    
                    
        #TODO:  yaw did this?
        #Test skip patterns
        # for i, row in enumerate(matrix):
        #     var = "g1_08"
        #     index = headers.index(var)
        #     testvar = "g1_07a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #    
        #     var = "g5_05"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06a"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06b"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #           
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #     
        #     var = "a2_03b"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_04"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     
        #     var = "a2_05"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_06"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #             
        #             
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #             
                    
        
        # fill in missing values:
        updatestr = "Filling in default values for empty columns\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                default = defaultFill.get(header)
                if default is not None and col == '':
                        row[i] = defaultFill[header]
                        
        #switch to new variables:
        for i, col in enumerate(headers):
            #only swap headers with values to swap
            try:
                swap = conversionVars[col]
                headers[i] = swap
            except KeyError:
                i = 1 # noop
        
        #add new headers:
        for newheader in generatedHeaders:
            headers.append(newheader)
                    
        #create the placeholders in our matrix for new headers
        for row in matrix:
            for h in generatedHeaders:
                row.append("0")    
                
                        
        updatestr = "Analyzing free text\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        freeText = ['c5_09',  'c5_12', 'c5_13', 'c5_14', 'c5_15', 'c5_16', 'c6_01', 'c6_02', 'c6_02', 'c6_03']
        
        wordsToVars = { 'abdomen' : 's99991',   'cri' : 's999910',   'distress' : 's999911',   'fetal' : 's999912',   'head' : 's999913',   'heart' : 's999914',   'heartbeat' : 's999915',   'hemorrhag' : 's999916',   'hypertens' : 's999917',   'incub' : 's999918',   'induc' : 's999919',   'anemia' : 's99992',   'infect' : 's999920',   'labor' : 's999921',   'live' : 's999922',   'lung' : 's999923',   'movement' : 's999924',   'neonatorum' : 's999925',   'oxygen' : 's999926',   'pneumonia' : 's999927',   'pneumothorax' : 's999928',   'prenat' : 's999929',   'asphyxia' : 's99993',   'preterm' : 's999930',   'respiratori' : 's999931',   'sepsi' : 's999932',   'stillbirth' : 's999933',   'swell' : 's999934',   'twin' : 's999935',   'ventil' : 's999936',   'weight' : 's999937',   'blood' : 's99994',   'breech' : 's99995',   'bwt' : 's99996',   'cesarean' : 's99997',   'color' : 's99998',   'cord' : 's99999' }
        
        keyWords = wordsToVars.keys()
        
        for question in freeText:
            index = headers.index(question)
            for row in matrix:
                answer = row[index]
                answerArray = answer.split(' ')
                for word in answerArray:
                    for keyword in keyWords:
                        if word.lower().startswith(keyword):
                            svar = wordsToVars[keyword.lower()]
                            sindex = headers.index(svar)
                            row[sindex] = '1'
                        
                
        #now do the calculations for the generated variables:
        for row in matrix:
            index = headers.index('g4_03b')
            if row[headers.index('g4_03a')] == str(11):
                row[index] = row[headers_old.index('gen_4_3a')]
            elif row[headers.index('g4_03a')] == str(12):
                row[index] = row[headers_old.index('gen_4_3b')]
            elif  row[headers.index('g4_03a')] == str(13):
                row[index] = row[headers_old.index('gen_4_3c')]
                
            index = headers.index('c1_05b')
            if row[headers.index('c1_05a')] == str(4):
                row[index] = row[headers_old.index('child_1_5a')]
            if row[headers.index('c1_05a')] == str(2):
                row[index] = row[headers_old.index('child_1_5b')]
                
            index = headers.index('c1_20b')
            if row[headers.index('c1_20a')] == str(4):
                row[index] = row[headers_old.index('child_1_20a')]
            if row[headers.index('c1_20a')] == str(2):
                row[index] = row[headers_old.index('child_1_20b')]
            if row[headers.index('c1_20a')] == str(1):
                row[index] = row[headers_old.index('child_1_20c')]
                
            index = headers.index('c1_21b')
            if row[headers.index('c1_21a')] == str(4):
                row[index] = row[headers_old.index('child_1_21a')]
            if row[headers.index('c1_21a')] == str(2):
                row[index] = row[headers_old.index('child_1_21b')]
                
            index = headers.index('c2_05b')
            if row[headers.index('c2_05a')] == str(5):
                row[index] = row[headers_old.index('child_2_5a')]
            if row[headers.index('c2_05a')] == str(4):
                row[index] = row[headers_old.index('child_2_5b')]
                                
            index = headers.index('c4_37b')
            if row[headers.index('c4_37a')] == str(4):
                row[index] = row[headers_old.index('child_4_37a')]
            if row[headers.index('c4_37a')] == str(3):
                row[index] = row[headers_old.index('child_4_37b')]
                
            if row[headers.index('child_4_47')] == str(0):
                row[headers.index('c4_47_11')] = 1
 
            index = headers.index('c4_49b')
            if row[headers.index('c4_49a')] == str(5):
                row[index] = row[headers_old.index('child_4_50a')]
            if row[headers.index('c4_49a')] == str(4):
                row[index] = row[headers_old.index('child_4_50b')]
            
            # fix child agedays.  if it's blank give it a 0, if it's not, give it a 4
            if row[headers.index('c1_25b')] == '' or row[headers.index('c1_25b')] is None:
                row[headers.index('c1_25a')] = 0
            else:
                row[headers.index('c1_25a')] = 4
                
            if row[headers.index('c1_25b')] >= 1 and row[headers.index('c1_25b')] <= 28:
                row[headers.index('c1_26')] = 1
            
        #fix duration variables    
        updatestr = "Processing duration variables\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        #removed because they don't exist?  c1_25, 
        durationVars = ['c1_05', 'c1_20', 'c1_21', 'c1_25', 'c2_02', 'c2_05', 'c2_10', 'c3_14', 'c3_18', 'c3_19', 'c3_21', 'c3_22', 'c3_27', 'c3_28', 'c3_30', 'c3_31', 'c4_02', 'c4_08', 'c4_10', 'c4_13', 'c4_17', 'c4_19', 'c4_33', 'c4_37', 'c4_49']
            
        # add duration variables
        for var in durationVars:
            headers.append(var)
            for row in matrix:
                row.append("")
                    
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            bindex = headers.index(b)
            index = headers.index(var)
                        
            for row in matrix:
                value = row[bindex]
                v2 = row[aindex]
                                    
                if value == '':
                    row[index] = 0
                else:
                    row[index] = float(value)
                if row[aindex] == str(1):
                    row[index] = float(row[index]) * 365.0
                if row[aindex] == str(2):
                    row[index] = float(row[index]) * 30.0
                if row[aindex] == str(3):
                    row[index] = float(row[index]) * 7.0
                if row[aindex] == str(5):
                    row[index] = float(row[index]) / 24.0
                if row[aindex] == str(6):
                    row[index] = float(row[index]) / 1440.0
                    
        # drop old a/b variables
        # we do two loops to make sure we don't cross indexes, inefficient...
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            headers.remove(a)
   
            for row in matrix:
                del row[aindex]
                
            bindex = headers.index(b)
            headers.remove(b)
            for row in matrix:
                del row[bindex]
                
        #fix missingness coding for weight from medical record
        for row in matrix:
            c5_07_1b = headers.index('c5_07_1b')
            c5_07_2b = headers.index('c5_07_2b')
            if (row[c5_07_1b] == '0' or row[c5_07_1b] == '9999' or row[c5_07_1b] == '99' or row[c5_07_1b] == '999'):
                row[c5_07_1b] = ''
            if (row[c5_07_2b] == '0' or row[c5_07_2b] == '9999' or row[c5_07_2b] == '99' or row[c5_07_2b] == '999'):
                row[c5_07_2b] = ''
                
            #Date of birth - clean up so you can get at least an estimated age
            g5_01d = headers.index('g5_01d')
            if (row[g5_01d] == '99'):
                row[g5_01d] = 0
            g5_01m = headers.index('g5_01m')
            if (row[g5_01m] == '99'):
                row[g5_01m] = 0
            g5_01y = headers.index('g5_01y')
            if (row[g5_01y] == '999'):
                row[g5_01y] = 0
                
            #clean up medical record dates
            c5_06_1d = headers.index('c5_06_1d')
            if row[c5_06_1d] == '99' or row[c5_06_1d] == '' or row[c5_06_1d] == None:
                row[c5_06_1d] = 0
            c5_06_1m = headers.index('c5_06_1m')
            if row[c5_06_1m] == '99' or row[c5_06_1m] == '' or row[c5_06_1m] == None:
                row[c5_06_1m] = 0
            c5_06_1y = headers.index('c5_06_1y')
            if row[c5_06_1y] == '9999' or row[c5_06_1y] == '' or row[c5_06_1y] == None:
                row[c5_06_1y] = 0
            
            c5_06_2d = headers.index('c5_06_2d')
            if row[c5_06_2d] == '99' or row[c5_06_2d] == '' or row[c5_06_2d] == None:
                row[c5_06_2d] = 0
            c5_06_2m = headers.index('c5_06_2m')
            if row[c5_06_2m] == '99' or row[c5_06_2m] == '' or row[c5_06_2m] == None:
                row[c5_06_2m] = 0
            c5_06_2y = headers.index('c5_06_2y')
            if row[c5_06_2y] == '9999' or row[c5_06_2y] == '' or row[c5_06_2y] == None:
                row[c5_06_2y] = 0
            

            knownAge = True
            if row[g5_01y] == 0 and row[g5_01m] == 0 and row[g5_01d] == 0:
                knownAge = False
                            
            if knownAge:
                #generate how many months after Jan 1 1960 they were born - This is a specific stata function
                #gen mofd = mofd(mdy(c1_10m, c1_10d, c1_10y))
                
                base_date = date(1960, 1, 1)
                delta = relativedelta(date(int(row[g5_01y]), int(row[g5_01m]), int(row[g5_01d])), base_date)
                mofd = delta.years*12 + delta.months
                
                mofm1 = -1
                mofm2 = -1
                if row[c5_06_1y] != 0 and int(row[c5_06_1m]) != 0 and int(row[c5_06_1d]) != 0:
                    exam1date = date(int(row[c5_06_1y]), int(row[c5_06_1m]), int(row[c5_06_1d]))
                    exam1delta = relativedelta(exam1date, base_date)
                    mofm1 = exam1delta.years * 12 + exam1delta.months
                    
                if row[c5_06_2y] != 0 and int(row[c5_06_2m]) != 0 and int(row[c5_06_2d]) != 0:
                    exam2date = date(int(row[c5_06_2y]), int(row[c5_06_2m]), int(row[c5_06_2d]))
                    exam2delta = relativedelta(exam2date, base_date)
                    mofm2 = exam2delta.years * 12 + exam2delta.months
            
                
                #identify most recent medical record
                #gen max_age = max(mofm1, mofm2)
                max_age = max(age_at_e1, age_at_e2)
                
                month = max_age - mofd
                
                # only keep going if they have a positive age
                if month >= 0:
                    #only neonate
                    if row[headers.index('c5_07_2b')] == '' or row[headers.index('c5_07_2b')] == None or row[headers.index('c5_07_1b')] == '' or row[headers.index('c5_07_1b')] == None:
                            month = 0
                    
                    maxweight = max(row[c5_07_1b], row[c5_07_2b])
                    weight_kg = maxweight/1000

                    # input months, output 3rd standard deviation below
                    male_sd3 = {}
      
                    female_sd3 = {}
        
                    male_sd2 = {0 : 2.5, 1 : 3.4, 2 : 4.3, 3 : 5, 4 : 5.6, 5 : 6, 6 : 6.4, 7 : 6.7, 8 : 6.9, 9 : 7.1, 10 : 7.4, 11 : 7.6, 12 : 7.7, 13 : 7.9, 14 : 8.1, 15 : 8.3, 16 : 8.4, 17 : 8.6, 18 : 8.8, 19 : 8.9, 20 : 9.1, 21 : 9.2, 22 : 9.4, 23 : 9.5, 24 : 9.7, 25 : 9.8, 26 : 10, 27 : 10.1, 28 : 10.2, 29 : 10.4, 30 : 10.5, 31 : 10.7, 32 : 10.8, 33 : 10.9, 34 : 11, 35 : 11.2, 36 : 11.3, 37 : 11.4, 38 : 11.5, 39 : 11.6, 40 : 11.8, 41 : 11.9, 42 : 12, 43 : 12.1, 44 : 12.2, 45 : 12.4, 46 : 12.5, 47 : 12.6, 48 : 12.7, 49 : 12.8, 50 : 12.9, 51 : 13.1, 52 : 13.2, 53 : 13.3, 54 : 13.4, 55 : 13.5, 56 : 13.6, 57 : 13.7, 58 : 13.8, 59 : 14, 60 : 14.1}

                    female_sd2 = {0 : 2.4, 1 : 3.2, 2 : 3.9, 3 : 4.5, 4 : 5, 5 : 5.4, 6 : 5.7, 7 : 6, 8 : 6.3, 9 : 6.5, 10 : 6.7, 11 : 6.9, 12 : 7, 13 : 7.2, 14 : 7.4, 15 : 7.6, 16 : 7.7, 17 : 7.9, 18 : 8.1, 19 : 8.2, 20 : 8.4, 21 : 8.6, 22 : 8.7, 23 : 8.9, 24 : 9, 25 : 9.2, 26 : 9.4, 27 : 9.5, 28 : 9.7, 29 : 9.8, 30 : 10, 31 : 10.1, 32 : 10.3, 33 : 10.4, 34 : 10.5, 35 : 10.7, 36 : 10.8, 37 : 10.9, 38 : 11.1, 39 : 11.2, 40 : 11.3, 41 : 11.5, 42 : 11.6, 43 : 11.7, 44 : 11.8, 45 : 12, 46 : 12.1, 47 : 12.2, 48 : 12.3, 49 : 12.4, 50 : 12.6, 51 : 12.7, 52 : 12.8, 53 : 12.9, 54 : 13, 55 : 13.2, 56 : 13.3, 57 : 13.4, 58 : 13.5, 59 : 13.6, 60 : 13.7}
            
                    sex = row[headers.index('g5_02')]
                    if sex == 1:
                        if weight_kg < male_sd3[max_age]:
                            row[headers.index('s181')] = 1
                        if weight_kg < male_sd2[max_age]:
                            row[headers.index('s180')] = 1
                    elif sex == 2:
                        if weight_kg < female_sd3[max_age]:
                            row[headers.index('s181')] = 1
                        if weight_kg < female_sd2[max_age]:
                            row[headers.index('s180')] = 1
                        
                        
                        
        #     local Adult_durs "a2_01 a2_03 a2_08 a2_15 a2_22 a2_24 a2_26 a2_28 a2_33 a2_37 a2_41 a2_48 a2_54 a2_58 a2_62 a2_65 a2_68 a2_70 a2_73 a2_76 a2_79 a2_83 a2_86 a3_08 a3_11 a3_16 a5_04"
        # local Child_durs "c1_05 c1_20 c1_21 c1_25 c2_02 c2_05 c2_10 c3_14 c3_18 c3_19 c3_21 c3_22 c3_27 c3_28 c3_30 c3_31 c4_02 c4_08 c4_10 c4_13 c4_17 c4_19 c4_33 c4_37 c4_49"
        # foreach var of local `module'_durs {
        #     gen `var' = `var'b
        #     replace `var' = `var' * 365 if `var'a == 1
        #     replace `var' = `var' * 30 if `var'a == 2
        #     replace `var' = `var' * 7 if `var'a == 3
        #     replace `var' = `var' / 24 if `var'a == 5
        #     replace `var' = `var' / 1440 if `var'a == 6
        #     order `var', before(`var'a)
        #     local name : variable label `var'b
        #     local name = "`name' [days]"
        #     label variable `var' "`name'"
        #     drop `var'a `var'b
        # }
		    
		# end loop
 
                        
        childwriter.writerow(headers)
        
        for row in matrix:
            childwriter.writerow(row)
                    
        return 1    	
        
        