#!/opt/virtualenvs/ihme-va/bin/pythonw

import csv
import string
import wx
import copy
import workerthread
import os
 

conversionVars = {'g5_04a' : 's2', 'g5_04b' : 's3', 'g5_04c' : 's4', 'c1_01' : 's5', 'c1_02' : 's6', 'c1_03' : 's7', 'c1_04' : 's8', 'c1_05b' : 's10', 'c1_06a' : 's11', 'c1_07' : 's13', 'c1_08b' : 's14', 'c1_09' : 's15', 'c1_11' : 's16', 'c1_12' : 's17', 'c1_13' : 's18', 'c1_14' : 's19', 'c1_15' : 's20', 'c1_16' : 's21', 'c1_17' : 's22', 'c1_18' : 's23', 'c1_19_1' : 's24', 'c1_19_2' : 's25', 'c1_19_3' : 's26', 'c1_19_4a' : 's27', 'c1_20b' : 's28', 'c1_21b' : 's29', 'c1_22a' : 's30', 'c1_25' : 's31', 'c1_26' : 's32', 'c2_01_1' : 's33', 'c2_01_2' : 's34', 'c2_01_3' : 's35', 'c2_01_4' : 's36', 'c2_01_5' : 's37', 'c2_01_6' : 's38', 'c2_01_7' : 's39', 'c2_01_8' : 's40', 'c2_01_9' : 's41', 'c2_01_10' : 's42', 'c2_01_12' : 's43', 'c2_02b' : 's45', 'c2_03' : 's46', 'c2_04' : 's47', 'c2_05b' : 's48', 'c2_06' : 's49', 'c2_07' : 's50', 'c2_08a' : 's51', 'c2_09' : 's52', 'c2_10b' : 's53', 'c2_11' : 's54', 'c2_12' : 's55', 'c2_13a' : 's56', 'c2_15a' : 's57', 'c2_17' : 's58', 'c2_18' : 's59', 'c3_01' : 's60', 'c3_02' : 's61', 'c3_03_1' : 's62', 'c3_03_2' : 's63', 'c3_03_3' : 's64', 'c3_04' : 's65', 'c3_05' : 's66', 'c3_06' : 's67', 'c3_07' : 's68', 'c3_08' : 's69', 'c3_09' : 's70', 'c3_10' : 's71', 'c3_11' : 's72', 'c3_12' : 's73', 'c3_13' : 's74', 'c3_14b' : 's75', 'c3_15' : 's76', 'c3_16' : 's77', 'c3_17' : 's78', 'c3_18b' : 's79', 'c3_19b' : 's80', 'c3_20' : 's81', 'c3_21b' : 's82', 'c3_22b' : 's83', 'c3_23' : 's84', 'c3_24' : 's85', 'c3_25' : 's86', 'c3_26' : 's87', 'c3_27b' : 's88', 'c3_28b' : 's89', 'c3_29' : 's90', 'c3_30b' : 's91', 'c3_31b' : 's92', 'c3_32' : 's93', 'c3_33' : 's94', 'c3_34' : 's95', 'c3_35' : 's96', 'c3_36' : 's97', 'c3_37' : 's98', 'c3_38' : 's99', 'c3_39' : 's100', 'c3_40' : 's101', 'c3_41' : 's102', 'c3_42' : 's103', 'c3_44' : 's104', 'c3_45b' : 's105', 'c3_46' : 's106', 'c3_47' : 's107', 'c3_48' : 's108', 'c3_49' : 's109', 'c5_17' : 's188', 'c5_18' : 's189', 'c5_19' : 's190', 'g5_02' : 'sex', 'c1_05' : 's9', 'c1_20' : 's28', 'c1_21' : 's29', 'c2_02' : 's45', 'c2_05' : 's48', 'c2_10' : 's53', 'c3_14' : 's75', 'c3_18' : 's79', 'c3_19' : 's80', 'c3_21' : 's82', 'c3_22' : 's83', 'c3_27' : 's88', 'c3_28' : 's89', 'c3_30' : 's91', 'c3_31' : 's92', 'sid' : 'sid'}

#variables generated by this step of the procedure
generatedHeaders = ['age', 's4991', 's4993', 's4994', 's5_1', 's6_1', 's8991', 's8992', 's11991', 's13_1', 's16_1', 's30991', 's46991', 's46992', 's49991', 's50991', 's51991', 's55991', 's56991', 's57991', 's58991', 's58992', 's58993', 's58994', 's69991', 's71991', 's76991', 's105_1']

#missing? s31
durationSymptoms = ['s4', 's9', 's14', 's28', 's29', 's45', 's48', 's53', 's75', 's79', 's80', 's82', 's83', 's88', 's89', 's91', 's92']

durCutoffs = {'s4':3, 's9':2, 's14':2500, 's28':2, 's29':3, 's45':255, 's48':.125, 's53':.2083333, 's75':2, 's79':2, 's80':2, 's82':2, 's83':2, 's88':3, 's89':2, 's91':3, 's92':2}

# not in electronic s32
binaryVars = ['s7', 's17', 's18', 's19', 's20', 's21', 's22', 's23', 's24', 's25', 's26', 's27', 's33', 's34', 's35', 's36', 's37', 's38', 's39', 's40', 's41', 's42', 's43', 's47', 's52', 's54', 's59', 's60', 's61', 's62', 's63', 's64', 's65', 's66', 's67', 's68', 's70', 's72', 's73', 's74', 's77', 's78', 's81', 's84', 's85', 's86', 's87', 's90', 's93', 's94', 's95', 's96', 's97', 's98', 's99', 's100', 's101', 's102', 's103', 's104', 's106', 's106', 's107', 's108', 's109', 's188', 's189', 's190']


class NeonateSymptomPrep():
    def __init__(self, notify_window, input_file, output_dir):
        self.inputFilePath = input_file
        self._notify_window = notify_window
        self.inputFilePath = input_file
        self.output_dir = output_dir

    def run(self):
        reader = csv.reader(open( self.inputFilePath, 'rb'))
        adultwriter = csv.writer(open(self.output_dir + os.sep + 'neonate-symptom.csv', 'wb', buffering=0))
        
        matrix = list()
        headers = list()
        
        updatestr = "Processing neonate symptom data\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
    
        first = 1
        # read in new .csv for processing
        # we add the generated headers later this time
        for row in reader:
            if first == 1:
                for col in row:    
                    headers.append(col)
                first = 0      
            else:
                matrix.append(row)
                
        #Do age thing here first...
        
        
        #drop unused variables
        keys = conversionVars.keys()
        keys.extend(['s99991', 's999910', 's999911', 's999912', 's999913', 's999914', 's999915', 's999916', 's999917', 's999918', 's999919', 's99992', 's999920', 's999921', 's999922', 's999923', 's999924', 's999925', 's999926', 's999927', 's999928', 's999929', 's99993', 's999930', 's999931', 's999932', 's999933', 's999934', 's999935', 's999936', 's999937', 's99994', 's99995', 's99996', 's99997', 's99998', 's99999'])
        headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col not in keys:
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)
        
        # now convert variable names
        for i, header in enumerate(headers):
            try:
                headers[i] = conversionVars[header]
            except KeyError:
                a = 1  #noop
                    
        # add new variables and create space for them in the matrix
        for gen in generatedHeaders:
            headers.append(gen)
            for row in matrix:
                row.append("0")
          

        #new stuffs
        for row in matrix:
            index = headers.index('age')
            if row[headers.index('s4')] <= 6:
                row[index] = 0
            else:
                row[index] = .01
        
            # this gets changed?
            # sex = row[headers.index('g5_02')]
            #             if sex == '' or sex == str(9):
            #                 sex = 1
            #             row[headers.index('sex')] = sex
            

            # recode sex variable
            sex = row[headers.index('sex')]
            if sex == str(9) or sex == str(1):
                sex = 0
            elif sex == str(2):
                sex = 1
            row[headers.index('sex')] = sex
            
            # not in electronic
            # recode second sex variable
            # s15 = row[headers.index('s15')]
            #             if s15 == str(9) or s15 == str(1):
            #                 s15 = 0
            #             elif s15 == str(2):
            #                 s15 = 1
            #             row[headers.index('s15')] = s15
   
            s2 = row[headers.index('s2')]
            s3 = row[headers.index('s3')]
            s4 = row[headers.index('s4')]
            
            if s2 == str(999) and s3 == str(99) and s4 == str(99):
                s2 = ''
                s3 = ''
                s4 = ''
            else:
                if s2 == str(999):
                    s2 = 0
                if s3 == str(99):
                    s3 = 0
                if s4 == str(99):
                    s4 = 0
            
            s3 = int(s3) * 30
            if (s4 == 0 and s3 != ''):
                s4 = s3

            row[headers.index('s2')] = s2
            row[headers.index('s3')] = s3
            row[headers.index('s4')] = s4
            
            
            index = headers.index('s4')
            s4991index = headers.index('s4991')
            s4993index = headers.index('s4993')
            s4994index = headers.index('s4994')
            if float(row[index]) <= 0:
                row[s4991index] = 1
            elif float(row[index]) > 0 and float(row[index]) <= 2:
                row[s4993index] = 1
            elif float(row[index]) > 2:
                row[s4994index] = 1
            #and not blank and not== 999?
    
            for sym in durationSymptoms:
                index = headers.index(sym)
                #replace the duration with 1000 if it is over 1000 and not missing
                if row[index] == '':
                    row[index] = 0
                elif float(row[index]) > 1000:
                    row[index] = 1000
                # use cutoffs to determine if they will be replaced with a 1 (were above or equal to the cutoff)
                if float(row[index]) >= durCutoffs[sym]:
                    row[index] = 1
                else:
                    row[index] = 0
                    
                #rename s4 age?
            #dichotimize!
            index = headers.index('s5_1')
            val = row[headers.index('s5')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 2):
                row[index] = 1
                
            index = headers.index('s6_1')
            val = row[headers.index('s6')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 2 or val == 3):
                row[index] = 1
                
            index = headers.index('s8991')
            val = row[headers.index('s8')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 1):
                row[index] = 1
                
            index = headers.index('s8992')
            val = row[headers.index('s8')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 2):
                row[index] = 1
                
            index = headers.index('s11991')
            val = row[headers.index('s11')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 4 or val == 5):
                row[index] = 1
                
            index = headers.index('s13_1')
            val = row[headers.index('s13')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 1 or val == 2):
                row[index] = 1
                
            index = headers.index('s16_1')
            val = row[headers.index('s16')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 2):
                row[index] = 1
                
            index = headers.index('s30991')
            val = row[headers.index('s30')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 3 or val == 4):
                row[index] = 1
                
            index = headers.index('s46991')
            val = row[headers.index('s46')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 1):
                row[index] = 1
                
            index = headers.index('s46992')
            val = row[headers.index('s46')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 3):
                row[index] = 1
                
            index = headers.index('s49991')
            val = row[headers.index('s49')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 2):
                row[index] = 1
                
            index = headers.index('s50991')
            val = row[headers.index('s50')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 2):
                row[index] = 1
                
            index = headers.index('s51991')
            val = row[headers.index('s51')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 1 or val == 3):
                row[index] = 1
                
            index = headers.index('s55991')
            val = row[headers.index('s55')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (val == 1 or val == 2):
                row[index] = 1
                
            #not in electronic    
            # index = headers.index('s56991')
            #             val = row[headers.index('s56')]
            #             if val == '':
            #                 val = 0
            #             else:
            #                 val = int(val)
            #             if (val == 4 or val == 5):
            #                 row[index] = 1
                
            index = headers.index('s57991')
            val = row[headers.index('s57')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if (not(val == 1 or val == 2)):
                row[index] = 1
                
            index = headers.index('s58991')
            val = row[headers.index('s58')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val == 1:
                row[index] = 1
            
            index = headers.index('s58992')
            val = row[headers.index('s58')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val == 2:
                row[index] = 1
                
            index = headers.index('s58993')
            val = row[headers.index('s58')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val == 3:
                row[index] = 1
                
            index = headers.index('s58994')
            val = row[headers.index('s58')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val == 4:
                row[index] = 1
                
            index = headers.index('s69991')
            val = row[headers.index('s69')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val == 3 or val == 4:
                row[index] = 1
                
            index = headers.index('s71991')
            val = row[headers.index('s71')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val == 2:
                row[index] = 1
                
            index = headers.index('s76991')
            val = row[headers.index('s76')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val == 2:
                row[index] = 1
                
            index = headers.index('s105_1')
            val = row[headers.index('s105')]
            if val == '':
                val = 0
            else:
                val = int(val)
            if val > 1:
                row[index] = 1
                
            # ensure all binary variables actually ARE 0 or 1:
            for bin in binaryVars:
                val = row[headers.index(bin)]
                if val == '' or int(val) != 1:
                    row[headers.index(bin)] = 0
            
                
            
        #not in electronic s56
        #drop s15 because it's not there
        # drop 'age' because it was just used for a calculation, and will be replaced with a new 'age'
        droplist = ['s2', 's3', 's5', 's6', 's8', 's11', 's13', 's16', 's30', 's46', 's49', 's50', 's51', 's55', 's57', 's58', 's69', 's71', 's76', 's105', 'age']
        for d in droplist:
            index = headers.index(d)
            headers.remove(d)
            for row in matrix:
                del row[index]
                
                
        rename = {'s5_1' : 's5', 's6_1' : 's6', 's13_1' : 's13', 's16_1' : 's16', 's105_1' : 's105', 's4' : 'age'} 
        for key in rename.keys():
            index = headers.index(key)
            headers[index] = rename[key]
        
        adultwriter.writerow(headers)
        for row in matrix:
            adultwriter.writerow(row)
        
                
        #s180, s181, s31, s32
        #no s4 for them.. age?..yup
        #i have 2 sex variables..?        
                    
        return 1    	
        
        