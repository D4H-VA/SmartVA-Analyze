#!/opt/virtualenvs/ihme-va/bin/pythonw

import csv
import string
import wx
import copy
import workerthread
import os
from defaultfill import adult_defaultFill
from answer_ranges import adult_rangelist
from presymptom_conversions import adult_conversionVars
from word_conversions import adult_wordsToVars

# new headers generated by this step in processing
generatedHeaders = ['g4_03b', 'a2_01b', 'a2_22b', 'a2_24b', 'a2_26b', 'a2_28b', 'a2_33b', 'a2_37b', 'a2_41b', 'a2_54b', 'a2_58b', 'a2_62b', 'a2_65b', 'a2_68b', 'a2_70b', 'a2_73b', 'a2_76b', 'a2_79b', 'a2_83b', 'a2_86b', 'a4_02_1', 'a4_02_2', 'a4_02_3', 'a4_02_4', 'a4_02_5a', 'a4_02_6', 'a4_02_7', 'a5_01_8', 'a5_04b', 'a6_02_1', 'a6_02_2', 'a6_02_3', 'a6_02_4', 'a6_02_5', 'a6_02_6', 'a6_02_8', 'a6_02_9', 'a6_02_10', 'a6_02_11', 'a6_02_12a', 'a6_02_13', 'a6_02_14', 'a6_02_15']


class PreSymptomPrep():
    def __init__(self, notify_window, input_file, output_dir):
        self._notify_window = notify_window
        self.inputFilePath = input_file
        self.output_dir = output_dir

    def run(self):
        reader = csv.reader(open( self.inputFilePath, 'rb'))
        adultwriter = csv.writer(open(self.output_dir + os.sep + 'adult-presymptom.csv', 'wb', buffering=0))
        
        matrix = list()
        headers = list()
        
        updatestr = "Processing adult presymptom data\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
    
        first = 1
        # read in new .csv for processing
        # we add the generated headers later this time
        for row in reader:
            if first == 1:
                for col in row:    
                    headers.append(col)
                first = 0
                    
            else:
                matrix.append(row)
                
        # drop all child variables
        # must iterate over a copy because we can't change values in a list we're iterating over
        headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col.startswith("c") or col.startswith("p"):
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)
        
        #make a copy of the new list
        headers_old = copy.deepcopy(headers)
        
        error = 0
        updatestr = "Verifying answers fall within legal bounds\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))                          
        # verify that answer is within legal bounds
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                if col != '':
                    # if it's empty, we just skip it.  not sure there's a "required"
                    rangetest = adult_rangelist.get(header)
                    if not (rangetest is  None or rangetest == '') and col not in adult_rangelist.get(header):
                        #ERROR
                        updatestr = "value %s in row %s for col %s is not legal, please see Codebook for legal values" % (col, i, header)
                        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        if error == 0:
            updatestr = "answers verified\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        else:
            updatestr = "Errors found, not continuing\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))    
            return 0
                    
        #TODO:  yaw did this?
        #Test skip patterns
        # for i, row in enumerate(matrix):
        #     var = "g1_08"
        #     index = headers.index(var)
        #     testvar = "g1_07a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #    
        #     var = "g5_05"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06a"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06b"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #           
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #     
        #     var = "a2_03b"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_04"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     
        #     var = "a2_05"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_06"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #             
        #             
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #             
                    
        
        updatestr = "Filling in default values for empty columns\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        # fill in missing default values:
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                default = adult_defaultFill.get(header)
                if default is not None and col == '':
                        row[i] = adult_defaultFill[header]
                          
        #switch to new variables:
        for i, col in enumerate(headers):
            #only swap headers with values to swap
            try:
                swap = adult_conversionVars[col]
                headers[i] = swap
            except KeyError:
                i = 1 # noop
                
                
        #add new headers:
        for newheader in generatedHeaders:
            headers.append(newheader)
        
        #create the placeholders in our matrix for new headers
        for row in matrix:
            for h in generatedHeaders:
                row.append("0")    
        
        updatestr = "Analyzing free text\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))        
        freeText = ['a5_01_9b', 'a6_08',  'a6_11', 'a6_12', 'a6_13', 'a6_14', 'a6_15', 'a7_01']
        
        keyWords = adult_wordsToVars.keys()
        
        for question in freeText:
            index = headers.index(question)
            for row in matrix:
                answer = row[index]
                answerArray = answer.split(' ')
                for word in answerArray:
                    for keyword in keyWords:
                        if word.lower().startswith(keyword):
                            svar = adult_wordsToVars[keyword.lower()]
                            sindex = headers.index(svar)
                            row[sindex] = '1'
                        
                        
        #now do the calculations for the generated variables:
        for row in matrix:
            index = headers.index('g4_03b')
            if row[headers.index('g4_03a')] == str(11):
                row[index] = row[headers_old.index('gen_4_3a')]
            elif row[headers.index('g4_03a')] == str(12):
                row[index] = row[headers_old.index('gen_4_3b')]
            elif  row[headers.index('g4_03a')] == str(13):
                row[index] = row[headers_old.index('gen_4_3c')]
                
            index = headers.index('a2_01b')
            if row[headers.index('a2_01a')] == str(1):
                row[index] = row[headers_old.index('adult_2_1a')]
            if row[headers.index('a2_01a')] == str(2):
                row[index] = row[headers_old.index('adult_2_1b')]
            if row[headers.index('a2_01a')] == str(4):
                row[index] = row[headers_old.index('adult_2_1c')]
            if row[headers.index('a2_01a')] == str(5):
                row[index] = row[headers_old.index('adult_2_1d')]
                            
            index = headers.index('a2_22b')
            if row[headers.index('a2_22a')] == str(4):
                row[index] = row[headers_old.index('adult_2_22a')]
            if row[headers.index('a2_22a')] == str(2):
                row[index] = row[headers_old.index('adult_2_22b')]
            
            
            index = headers.index('a2_24b')
            if row[headers.index('a2_22a')] == str(4):
                row[index] = row[headers_old.index('adult_2_24a')]
            if row[headers.index('a2_22a')] == str(2):
                row[index] = row[headers_old.index('adult_2_24b')]
                
            
            index = headers.index('a2_26b')
            if row[headers.index('a2_26a')] == str(4):
                row[index] = row[headers_old.index('adult_2_26a')]
            if row[headers.index('a2_26a')] == str(2):
                row[index] = row[headers_old.index('adult_2_26b')]
                
            index = headers.index('a2_33b')
            if row[headers.index('a2_33a')] == str(4):
                row[index] = row[headers_old.index('adult_2_33a')]
            if row[headers.index('a2_33a')] == str(2):
                row[index] = row[headers_old.index('adult_2_33b')]
            
            
            index = headers.index('a2_37b')
            if row[headers.index('a2_37a')] == str(4):
                row[index] = row[headers_old.index('adult_2_37a')]
            if row[headers.index('a2_37a')] == str(2):
                row[index] = row[headers_old.index('adult_2_37b')]
                
            index = headers.index('a2_41b')
            if row[headers.index('a2_41a')] == str(4):
                row[index] = row[headers_old.index('adult_2_41a')]
            if row[headers.index('a2_41a')] == str(2):
                row[index] = row[headers_old.index('adult_2_41b')]   
                
            index = headers.index('a2_54b')
            if row[headers.index('a2_54a')] == str(5):
                row[index] = row[headers_old.index('adult_2_54a')]
            if row[headers.index('a2_54a')] == str(4):
                row[index] = row[headers_old.index('adult_2_54b')]   
                
              
            index = headers.index('a2_58b')
            if row[headers.index('a2_58a')] == str(4):
                row[index] = row[headers_old.index('adult_2_58a')]
            if row[headers.index('a2_58a')] == str(2):
                row[index] = row[headers_old.index('adult_2_58b')] 
                
            index = headers.index('a2_62b')
            if row[headers.index('a2_62a')] == str(5):
                row[index] = row[headers_old.index('adult_2_62a')]
            if row[headers.index('a2_62a')] == str(4):
                row[index] = row[headers_old.index('adult_2_62b')] 
            if row[headers.index('a2_62a')] == str(2):
                row[index] = row[headers_old.index('adult_2_62c')]  
                
            index = headers.index('a2_65b')
            if row[headers.index('a2_65a')] == str(4):
                row[index] = row[headers_old.index('adult_2_65a')]
            if row[headers.index('a2_65a')] == str(2):
                row[index] = row[headers_old.index('adult_2_65b')]    
                
            
            index = headers.index('a2_68b')
            if row[headers.index('a2_68a')] == str(4):
                row[index] = row[headers_old.index('adult_2_68a')]
            if row[headers.index('a2_68a')] == str(2):
                row[index] = row[headers_old.index('adult_2_68b')]    
              
            index = headers.index('a2_70b')
            if row[headers.index('a2_70a')] == str(5):
                row[index] = row[headers_old.index('adult_2_70a')]
            if row[headers.index('a2_70a')] == str(4):
                row[index] = row[headers_old.index('adult_2_70b')]   
            
            index = headers.index('a2_73b')
            if row[headers.index('a2_73a')] == str(4):
                row[index] = row[headers_old.index('adult_2_73a')]
            if row[headers.index('a2_73a')] == str(5):
                row[index] = row[headers_old.index('adult_2_73b')] 
            
            index = headers.index('a2_76b')
            if row[headers.index('a2_76a')] == str(4):
                row[index] = row[headers_old.index('adult_2_76b')]
            if row[headers.index('a2_76a')] == str(2):
                row[index] = row[headers_old.index('adult_2_76b')] 
                
            index = headers.index('a2_79b')
            if row[headers.index('a2_79a')] == str(4):
                row[index] = row[headers_old.index('adult_2_79a')]
            if row[headers.index('a2_79a')] == str(2):
                row[index] = row[headers_old.index('adult_2_79b')] 
            
            index = headers.index('a2_83b')
            if row[headers.index('a2_83a')] == str(6):
                row[index] = row[headers_old.index('adult_2_83a')]
            if row[headers.index('a2_83a')] == str(5):
                row[index] = row[headers_old.index('adult_2_83b')]
                
            index = headers.index('a2_86b')
            if row[headers.index('a2_86a')] == str(4):
                row[index] = row[headers_old.index('adult_2_86a')]
            if row[headers.index('a2_86a')] == str(2):
                row[index] = row[headers_old.index('adult_2_86b')]
            if row[headers.index('a2_86a')] == str(1):
                row[index] = row[headers_old.index('adult_2_86c')]
            
            #adult_4_2 can have multiple answers    
            adult42list = row[headers_old.index('adult_4_2')].split(' ')    
            if str(1) in adult42list:
                row[headers.index('a4_02_1')] = 1
            if str(2) in adult42list:
                row[headers.index('a4_02_2')] = 1
            if str(3) in adult42list:
                row[headers.index('a4_02_3')] = 1
            if str(4) in adult42list:
                row[headers.index('a4_02_4')] = 1
            if str(11) in adult42list:
                row[headers.index('a4_02_5a')] = 1
            if str(8) in adult42list:
                row[headers.index('a4_02_6')] = 5
            if str(9) in adult42list:
                row[headers.index('a4_02_7')] = 5
            
            index = headers.index('a5_01_8')
            if row[headers.index('adult_5_1')] == str(0):
                row[index] = 1
        
                
            index = headers.index('a5_04b')
            if row[headers.index('a5_04a')] == str(5):
                row[index] = row[headers_old.index('adult_5_5a')]
            if row[headers.index('a5_04a')] == str(4):
                row[index] = row[headers_old.index('adult_5_5b')]
            if row[headers.index('a5_04a')] == str(2):
                row[index] = row[headers_old.index('adult_5_5c')]
            if row[headers.index('a5_04a')] == str(1):
                row[index] = row[headers_old.index('adult_5_5d')]
            
            #adult_6_2 can have multiple answers
            adult62list = row[headers_old.index('adult_6_2')].split(' ')
            if str(1) in adult62list:
                row[headers.index('a6_02_1')] = 1
            if str(2) in adult62list:
                row[headers.index('a6_02_2')] = 1
            if str(3) in adult62list:
                row[headers.index('a6_02_3')] = 1
            if str(4) in adult62list:
                row[headers.index('a6_02_4')] = 1
            if str(5) in adult62list:
                row[headers.index('a6_02_5')] = 1
            if str(6) in adult62list:
                row[headers.index('a6_02_6')] = 1
            if str(7) in adult62list:
                row[headers.index('a6_02_8')] = 1
            if str(8) in adult62list:
                row[headers.index('a6_02_9')] = 1
            if str(9) in adult62list:
                row[headers.index('a6_02_10')] = 1
            if str(10) in adult62list:
                row[headers.index('a6_02_11')] = 1
            if str(11) in adult62list:
                row[headers.index('a6_02_12a')] = 1
            if str(12) in adult62list:
                row[headers.index('a6_02_13')] = 1
            if str(88) in adult62list:
                row[headers.index('a6_02_14')] = 1
            if str(99) in adult62list:
                row[headers.index('a6_02_15')] = 1
            
        updatestr = "Processing duration variables\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))                
        #fix duration variables    
        durationVars = ['a2_01', 'a2_03', 'a2_08', 'a2_15', 'a2_22', 'a2_24', 'a2_26', 'a2_28', 'a2_33', 'a2_37', 'a2_41', 'a2_48', 'a2_54', 'a2_58', 'a2_62', 'a2_65', 'a2_68', 'a2_70', 'a2_73', 'a2_76', 'a2_79', 'a2_83', 'a2_86', 'a3_08', 'a3_11', 'a3_16', 'a5_04']
            
        # add duration variables
        for var in durationVars:
            headers.append(var)
            for row in matrix:
                row.append("")
                    
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            bindex = headers.index(b)
            index = headers.index(var)
            
            # if var == "a2_01":
            #                print "asdf %s" % bindex
                        
            for row in matrix:
                value = row[bindex]
                v2 = row[aindex]
                
                if (value == '' or value == str(0)) and var == "a5_04":
                    # special case for injuries
                    row[index] = 999
                else:                    
                    if value == '':
                        row[index] = 0
                    else:
                        row[index] = float(value)
                    if row[aindex] == str(1):
                        row[index] = float(row[index]) * 365.0
                    if row[aindex] == str(2):
                        row[index] = float(row[index]) * 30.0
                    if row[aindex] == str(3):
                        row[index] = float(row[index]) * 7.0
                    if row[aindex] == str(5):
                        row[index] = float(row[index]) / 24.0
                    if row[aindex] == str(6):
                        row[index] = float(row[index]) / 1440.0
                    
        # drop old a/b variables
        # we do two loops to make sure we don't cross indexes, inefficient...
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            headers.remove(a)
   
            for row in matrix:
                del row[aindex]
                
            bindex = headers.index(b)
            headers.remove(b)
            for row in matrix:
                del row[bindex]
                
            
            
        #     local Adult_durs "a2_01 a2_03 a2_08 a2_15 a2_22 a2_24 a2_26 a2_28 a2_33 a2_37 a2_41 a2_48 a2_54 a2_58 a2_62 a2_65 a2_68 a2_70 a2_73 a2_76 a2_79 a2_83 a2_86 a3_08 a3_11 a3_16 a5_04"
        # local Child_durs "c1_05 c1_20 c1_21 c1_25 c2_02 c2_05 c2_10 c3_14 c3_18 c3_19 c3_21 c3_22 c3_27 c3_28 c3_30 c3_31 c4_02 c4_08 c4_10 c4_13 c4_17 c4_19 c4_33 c4_37 c4_49"
        # foreach var of local `module'_durs {
        #     gen `var' = `var'b
        #     replace `var' = `var' * 365 if `var'a == 1
        #     replace `var' = `var' * 30 if `var'a == 2
        #     replace `var' = `var' * 7 if `var'a == 3
        #     replace `var' = `var' / 24 if `var'a == 5
        #     replace `var' = `var' / 1440 if `var'a == 6
        #     order `var', before(`var'a)
        #     local name : variable label `var'b
        #     local name = "`name' [days]"
        #     label variable `var' "`name'"
        #     drop `var'a `var'b
        # }
		    
		# end loop
		
		# drop a4_02, adult_5_1	adult_6_2

        dropme = headers.index('a4_02')
        headers.remove('a4_02')
        for row in matrix:
                del row[dropme]
		    
		#get rid of all unused 'adult' headers
		headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col.startswith("adult"):
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)

        #free text
        #a5_01_9b, a6_08,  a6_11, a6_12, a6_13, a6_14, a6_15, a7_01
        #child/neonate c5_09,  c5_12, c5_13, c5_14, c5_15, c5_16, c6_01, c6_02, c6_03
        
        updatestr = "Writing adult-presymptom.csv\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))                
        adultwriter.writerow(headers)
        for row in matrix:
            adultwriter.writerow(row)
                    
        return 1    	
        
        