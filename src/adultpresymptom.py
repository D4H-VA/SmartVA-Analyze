#!/opt/virtualenvs/ihme-va/bin/pythonw

import csv
import string
import wx
import copy
import workerthread
import os

# new headers generated by this step in processing
generatedHeaders = ['g4_03b', 'a2_01b', 'a2_22b', 'a2_24b', 'a2_26b', 'a2_28b', 'a2_33b', 'a2_37b', 'a2_41b', 'a2_54b', 'a2_58b', 'a2_62b', 'a2_65b', 'a2_68b', 'a2_70b', 'a2_73b', 'a2_76b', 'a2_79b', 'a2_83b', 'a2_86b', 'a4_02_1', 'a4_02_2', 'a4_02_3', 'a4_02_4', 'a4_02_5a', 'a4_02_6', 'a4_02_7', 'a5_01_8', 'a5_04b', 'a6_02_1', 'a6_02_2', 'a6_02_3', 'a6_02_4', 'a6_02_5', 'a6_02_6', 'a6_02_8', 'a6_02_9', 'a6_02_10', 'a6_02_11', 'a6_02_12a', 'a6_02_13', 'a6_02_14', 'a6_02_15']

# large dictionary mapping question variables to acceptible ranges of values for answers
rangelist = {'g1_01d':range(1, 31+1) + [99], 'g1_01m':range(1, 12+1) + [99], 'g1_01y':range(1900, 2013+1) + [9999], 'g1_05':[1, 2, 8, 9], 'g1_06d':range(1, 31+1) + [99], 'g1_06m':range(1, 12+1) + [99], 'g1_06y':range(1900,2013+1) + [9999], 'g1_07a':range(0, 120+1) + [999], 'g1_07b':range(0, 12+1) + [99], 'g1_07c':range(0, 31+1) + [99], 'g1_08':[1, 2, 3, 4, 5, 8, 9], 'g1_09':[1, 2, 3, 4, 9], 'g1_10':range(0, 99+1), 'g2_01':'', 'g2_02':'', 'g2_03ad':range(1, 31+1) + [99], 'g2_03am':range(1, 12+1) +[99], 'g2_03ay':range(1900, 2013+1) + [9999], 'g2_03bd':range(1,31+1) + [99], 'g2_03bm':range(1,12+1) + [99], 'g2_03by':range(1900, 2013+1) + [9999], 'g2_03cd':range(1, 31+1) + [99], 'g2_03cm':range(1, 12) + [99], 'g2_03cy':range(1900, 2013+1)  + [9999], 'g2_03dd':range(1,31+1) + [99], 'g2_03dm':range(1,12+1) + [99], 'g2_03dy':range(1900,2013+1) +[9999], 'g2_03ed':range(1,31+1) + [99], 'g2_03em':range(1, 12+1) + [99], 'g2_03ey':range(1900, 2013+1) +[9999], 'g2_03fd':range(1, 31+1) + [99], 'g2_03fm':range(1, 12+1) + [99], 'g2_03fy':range(1900, 2013+1) + [9999], 'g3_01':[0, 1, 8, 9], 'g4_02':[1, 2, 8, 9], 'g4_03a':[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99], 'g4_03b':'', 'g4_04':'', 'g4_05':[1, 2, 3, 4, 9], 'g4_06':'', 'g4_07':'', 'g4_08':[0, 1, 8, 9], 'g5_01d':range(1, 31+1) + [99], 'g5_01m':range(1, 12+1) + [99], 'g5_01y':range(1900, 2013 +1) + [999], 'g5_02':[1, 2, 8, 9], 'g5_03d':range(1, 31+1) + [99], 'g5_03m':range(1, 12+1) + [99], 'g5_03y':range(1900, 2013 +1) + [999], 'g5_04a':range(0, 120+1), 'g5_04b':range(0, 12+1), 'g5_04c':range(0, 28+1), 'g5_05':[1, 2, 3, 4, 5, 8, 9], 'g5_06a':[1, 2, 3, 4, 9], 'g5_06b':range (0, 99+1), 'g5_07':[0, 1, 8, 9], 'g5_08':'', 'a1_01_1':[0, 1, 8, 9], 'a1_01_2':[0, 1, 8, 9], 'a1_01_3':[0, 1, 8, 9], 'a1_01_4':[0, 1, 8, 9], 'a1_01_5':[0, 1, 8, 9], 'a1_01_6':[0, 1, 8, 9], 'a1_01_7':[0, 1, 8, 9], 'a1_01_8':[0, 1, 8, 9], 'a1_01_9':[0, 1, 8, 9], 'a1_01_10':[0, 1, 8, 9], 'a1_01_11':[0, 1, 8, 9], 'a1_01_12':[0, 1, 8, 9], 'a1_01_13':[0, 1, 8, 9], 'a1_01_14':[0, 1, 8, 9], 'a2_01a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_01b':'', 'a2_02':[0, 1, 8, 9], 'a2_03a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_03b':'', 'a2_04':[1, 2, 3, 8, 9], 'a2_05':[1, 2, 3, 8, 9], 'a2_06':[0, 1, 8, 9], 'a2_07':[0, 1, 8, 9], 'a2_08a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_08b':'', 'a2_09_1a':[1, 2, 3, 4, 5, 8, 9], 'a2_09_1b':'', 'a2_09_2a':[1, 2, 3, 4, 5, 8, 9], 'a2_09_2b':'', 'a2_10':[0, 1, 8, 9], 'a2_11':[0, 1, 8, 9], 'a2_12':[0, 1, 8, 9], 'a2_13':[0, 1, 8, 9], 'a2_14':[0, 1, 8, 9], 'a2_15a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_15b':'', 'a2_16':[0, 1, 8, 9], 'a2_17':[0, 1, 8, 9], 'a2_18':[0, 1, 8, 9], 'a2_19':[1, 2, 3, 8, 9], 'a2_20':[0, 1, 8, 9], 'a2_21':[0, 1, 8, 9], 'a2_22a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_22b':'', 'a2_23':[0, 1, 8, 9], 'a2_24a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_24b':'', 'a2_25':[0, 1, 8, 9], 'a2_26a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_26b':'', 'a2_27':[0, 1, 8, 9], 'a2_28a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_28b':'', 'a2_29':[0, 1, 8, 9], 'a2_30':[0, 1, 8, 9], 'a2_31':[0, 1, 8, 9], 'a2_32':[0, 1, 8, 9], 'a2_33a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_33b':'', 'a2_34':[0, 1, 8, 9], 'a2_35':[0, 1, 8, 9], 'a2_36':[0, 1, 8, 9], 'a2_37a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_37b':'', 'a2_38':[1, 2, 8, 9], 'a2_39_1':[1, 2, 3, 4, 8, 9], 'a2_39_2':[1, 2, 3, 4, 8, 9], 'a2_40':[0, 1, 8, 9], 'a2_41a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_41b':'', 'a2_42':[0, 1, 8, 9], 'a2_43':[0, 1, 8, 9], 'a2_44':[1, 2, 3, 8, 9], 'a2_45':[0, 1, 8, 9], 'a2_46a':[1, 2, 3, 4, 8, 9], 'a2_46b':'', 'a2_47':[0, 1, 8, 9], 'a2_48a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_48b':'', 'a2_49':[0, 1, 8, 9], 'a2_50':[0, 1, 8, 9], 'a2_51':[0, 1, 8, 9], 'a2_52':[0, 1, 8, 9], 'a2_53':[0, 1, 8, 9], 'a2_54a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_54b':'', 'a2_55':[0, 1, 8, 9], 'a2_56':[0, 1, 8, 9], 'a2_57':[0, 1, 8, 9], 'a2_58a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_58b':'', 'a2_59':[1, 2, 3, 8, 9], 'a2_60':[0, 1, 8, 9], 'a2_61':[0, 1, 8, 9], 'a2_62a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_62b':'', 'a2_63_1':[1, 2, 8, 9], 'a2_63_2':[1, 2, 8, 9], 'a2_64':[0, 1, 8, 9], 'a2_65a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_65b':'', 'a2_66':[1, 2, 8, 9], 'a2_67':[0, 1, 8, 9], 'a2_68a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_68b':'', 'a2_69':[0, 1, 8, 9], 'a2_70a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_70b':'', 'a2_71':[1, 2, 8, 9], 'a2_72':[0, 1, 8, 9], 'a2_73a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_73b':'', 'a2_74':[0, 1, 8, 9], 'a2_75':[1, 2, 8, 9], 'a2_76a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_76b':'', 'a2_77':[0, 1, 8, 9], 'a2_78':[0, 1, 8, 9], 'a2_79a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_79b':'', 'a2_80':[1, 2, 8, 9], 'a2_81':[0, 1, 8, 9], 'a2_82':[0, 1, 8, 9], 'a2_83a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_83b':'', 'a2_84':[0, 1, 8, 9], 'a2_85':[0, 1, 8, 9], 'a2_86a':[1, 2, 3, 4, 5, 6, 8, 9], 'a2_86b':'', 'a2_87_1':[0, 1, 8, 9], 'a2_87_2':[0, 1, 8, 9], 'a2_87_3':[0, 1, 8, 9], 'a2_87_4':[0, 1, 8, 9], 'a2_87_5':[0, 1, 8, 9], 'a2_87_6':[0, 1, 8, 9], 'a2_87_7':[0, 1, 8, 9], 'a2_87_8':[0, 1, 8, 9], 'a2_87_9':[0, 1, 8, 9], 'a2_87_10a':[0, 1, 8, 9], 'a2_87_10b':'', 'a3_01':[0, 1, 8, 9], 'a3_02':[0, 1, 8, 9], 'a3_03':[0, 1, 8, 9], 'a3_04':[0, 1, 8, 9], 'a3_05':[0, 1, 8, 9], 'a3_06':[0, 1, 8, 9], 'a3_07':[0, 1, 8, 9], 'a3_08a':[1, 2, 3, 4, 5, 6, 8, 9], 'a3_08b':'', 'a3_09':[0, 1, 8, 9], 'a3_10':[0, 1, 8, 9], 'a3_11a':[1, 2, 3, 4, 5, 6, 8, 9], 'a3_11b':'', 'a3_12':[0, 1, 8, 9], 'a3_13':[0, 1, 8, 9], 'a3_14':[0, 1, 8, 9], 'a3_15':[0, 1, 8, 9], 'a3_16a':[1, 2, 3, 4, 5, 6, 8, 9], 'a3_16b':'', 'a3_17':[0, 1, 8, 9], 'a3_18':[0, 1, 8, 9], 'a3_19':[0, 1, 8, 9], 'a3_20':[0, 1, 8, 9], 'a4_01':[0, 1, 8, 9], 'a4_02_1':[0, 1, 8, 9], 'a4_02_2':[0, 1, 8, 9], 'a4_02_3':[0, 1, 8, 9], 'a4_02_4':[0, 1, 8, 9], 'a4_02_5a':[0, 1, 8, 9], 'a4_02_5b':'', 'a4_02_6':[0, 1, 8, 9], 'a4_02_7':[0, 1, 8, 9], 'a4_03':'', 'a4_04':'', 'a4_05':[0, 1, 8, 9], 'a4_06':[1, 2, 3, 8, 9], 'a5_01_1':[0, 1, 8, 9], 'a5_01_2':[0, 1, 8, 9], 'a5_01_3':[0, 1, 8, 9], 'a5_01_4':[0, 1, 8, 9], 'a5_01_5':[0, 1, 8, 9], 'a5_01_6':[0, 1, 8, 9], 'a5_01_7':[0, 1, 8, 9], 'a5_01_8':[0, 1, 8, 9], 'a5_01_9a':[0, 1, 8, 9], 'a5_01_9b':'', 'a5_02':[0, 1, 8, 9], 'a5_03':[0, 1, 8, 9], 'a5_04a':[1, 2, 3, 4, 5, 6, 8, 9], 'a5_04b':'', 'a6_01':[0, 1, 8, 9], 'a6_02_1':[0, 1, 8, 9], 'a6_02_2':[0, 1, 8, 9], 'a6_02_3':[0, 1, 8, 9], 'a6_02_4':[0, 1, 8, 9], 'a6_02_5':[0, 1, 8, 9], 'a6_02_6':[0, 1, 8, 9], 'a6_02_7':[0, 1, 8, 9], 'a6_02_8':[0, 1, 8, 9], 'a6_02_9':[0, 1, 8, 9], 'a6_02_10':[0, 1, 8, 9], 'a6_02_11':[0, 1, 8, 9], 'a6_02_12a':[0, 1, 8, 9], 'a6_02_12b':'', 'a6_02_13':[0, 1, 8, 9], 'a6_02_14':[0, 1, 8, 9], 'a6_02_15':[0, 1, 8, 9], 'a6_03':'', 'a6_04':[0, 1, 8, 9], 'a6_05':[0, 1, 8, 9], 'a6_06_1d':range(1, 31+1) + [99], 'a6_06_1m':range(1, 12+1) + [99], 'a6_06_1y':range(1900, 2013 +1) + [9999], 'a6_06_2d ':range(1, 31+1) + [99], 'a6_06_2m':range(1, 12+1) + [99], 'a6_06_2y':range(1900, 2013 +1) + [9999], 'a6_07d':range(1, 31+1) + [99], 'a6_07m':range(1, 12+1) + [99], 'a6_07y':range(1900, 2013 +1) + [9999], 'a6_08':'', 'a6_09':[0, 1, 8, 9], 'a6_10':[0 ,1 ,8 ,9], 'a6_11':'', 'a6_12':'', 'a6_13':'', 'a6_14':'', 'a6_15':'', 'a7_01':'', 'a7_02':'', 'a7_03':'', 'a7_04':'', 'a7_05':'', 'a7_06':'', 'a7_07':'', 'a7_08':'', 'a7_09':'', 'a7_10':'', 'a7_11':'', 'a7_12':'', 'a7_13':'', 'a7_14':'', 'a7_15':'', 'a7_16':'', 'a7_17':''}




# large dictionary of values to pre-fill if the answer is blank
defaultFill = {'g1_01d':'', 'g1_01m':'', 'g1_01y':'', 'g1_05':'', 'g1_06d':'', 'g1_06m':'', 'g1_06y':'', 'g1_07a':'', 'g1_07b':'', 'g1_07c':'', 'g1_08':1, 'g1_09':'', 'g1_10':'', 'g2_01':'', 'g2_02':'', 'g2_03ad':'', 'g2_03am':'', 'g2_03ay':'', 'g2_03bd':'', 'g2_03bm':'', 'g2_03by':'', 'g2_03cd':'', 'g2_03cm':'', 'g2_03cy':'', 'g2_03dd':'', 'g2_03dm':'', 'g2_03dy':'', 'g2_03ed':'', 'g2_03em':'', 'g2_03ey':'', 'g2_03fd':'', 'g2_03fm':'', 'g2_03fy':'', 'g3_01':'', 'g4_02':'', 'g4_03a':'', 'g4_03b':'', 'g4_04':'', 'g4_05':'', 'g4_06':'', 'g4_07':'', 'g4_08':'', 'g5_01d':'', 'g5_01m':'', 'g5_01y':'', 'g5_02':9, 'g5_03d':'', 'g5_03m':'', 'g5_03y':'', 'g5_04a':'', 'g5_04b':'', 'g5_04c':'', 'g5_05':1, 'g5_06a':1, 'g5_06b':0, 'g5_07':'', 'g5_08':'', 'a1_01_1':'', 'a1_01_2':'', 'a1_01_3':'', 'a1_01_4':'', 'a1_01_5':'', 'a1_01_6':'', 'a1_01_7':'', 'a1_01_8':'', 'a1_01_9':'', 'a1_01_10':'', 'a1_01_11':'', 'a1_01_12':'', 'a1_01_13':'', 'a1_01_14':'', 'a2_01a':'', 'a2_01b':'', 'a2_02':'', 'a2_03a':1, 'a2_03b':0, 'a2_04':9, 'a2_05':9, 'a2_06':0, 'a2_07':'', 'a2_08a':1, 'a2_08b':0, 'a2_09_1a':9, 'a2_09_1b':'', 'a2_09_2a':9, 'a2_09_2b':'', 'a2_10':'', 'a2_11':0, 'a2_12':'', 'a2_13':'', 'a2_14':0, 'a2_15a':1, 'a2_15b':0, 'a2_16':'', 'a2_17':'', 'a2_18':'', 'a2_19':9, 'a2_20':'', 'a2_21':'', 'a2_22a':1, 'a2_22b':0, 'a2_23':'', 'a2_24a':1, 'a2_24b':0, 'a2_25':'', 'a2_26a':1, 'a2_26b':0, 'a2_27':'', 'a2_28a':1, 'a2_28b':0, 'a2_29':'', 'a2_30':'', 'a2_31':'', 'a2_32':'', 'a2_33a':1, 'a2_33b':0, 'a2_34':0, 'a2_35':0, 'a2_36':'', 'a2_37a':1, 'a2_37b':0, 'a2_38':9, 'a2_39_1':9, 'a2_39_2':9, 'a2_40':'', 'a2_41a':1, 'a2_41b':0, 'a2_42':'', 'a2_43':'', 'a2_44':9, 'a2_45':0, 'a2_46a':9, 'a2_46b':'', 'a2_47':'', 'a2_48a':1, 'a2_48b':0, 'a2_49':'', 'a2_50':'', 'a2_51':0, 'a2_52':'', 'a2_53':'', 'a2_54a':1, 'a2_54b':0, 'a2_55':0, 'a2_56':0, 'a2_57':'', 'a2_58a':1, 'a2_58b':0, 'a2_59':9, 'a2_60':'', 'a2_61':'', 'a2_62a':1, 'a2_62b':0, 'a2_63_1':9, 'a2_63_2':9, 'a2_64':'', 'a2_65a':1, 'a2_65b':0, 'a2_66':9, 'a2_67':'', 'a2_68a':1, 'a2_68b':0, 'a2_69':'', 'a2_70a':1, 'a2_70b':0, 'a2_71':9, 'a2_72':'', 'a2_73a':1, 'a2_73b':0, 'a2_74':'', 'a2_75':9, 'a2_76a':1, 'a2_76b':0, 'a2_77':0, 'a2_78':'', 'a2_79a':1, 'a2_79b':0, 'a2_80':9, 'a2_81':'', 'a2_82':'', 'a2_83a':1, 'a2_83b':0, 'a2_84':0, 'a2_85':'', 'a2_86a':1, 'a2_86b':0, 'a2_87_1':0, 'a2_87_2':0, 'a2_87_3':0, 'a2_87_4':0, 'a2_87_5':0, 'a2_87_6':0, 'a2_87_7':0, 'a2_87_8':0, 'a2_87_9':0, 'a2_87_10a':0, 'a2_87_10b':'', 'a3_01':0, 'a3_02':0, 'a3_03':0, 'a3_04':0, 'a3_05':0, 'a3_06':0, 'a3_07':0, 'a3_08a':1, 'a3_08b':0, 'a3_09':0, 'a3_10':0, 'a3_11a':1, 'a3_11b':0, 'a3_12':0, 'a3_13':0, 'a3_14':0, 'a3_15':0, 'a3_16a':1, 'a3_16b':0, 'a3_17':0, 'a3_18':0, 'a3_19':0, 'a3_20':0, 'a4_01':'', 'a4_02_1':0, 'a4_02_2':0, 'a4_02_3':0, 'a4_02_4':0, 'a4_02_5a':0, 'a4_02_5b':'', 'a4_02_6':0, 'a4_02_7':0, 'a4_03':0, 'a4_04':0, 'a4_05':'', 'a4_06':9, 'a5_01_1':'', 'a5_01_2':'', 'a5_01_3':'', 'a5_01_4':'', 'a5_01_5':'', 'a5_01_6':'', 'a5_01_7':'', 'a5_01_8':'', 'a5_01_9a':'', 'a5_01_9b':'', 'a5_02':0, 'a5_03':0, 'a5_04a':1, 'a5_04b':'', 'a6_01':'', 'a6_02_1':0, 'a6_02_2':0, 'a6_02_3':0, 'a6_02_4':0, 'a6_02_5':0, 'a6_02_6':0, 'a6_02_7':0, 'a6_02_8':0, 'a6_02_9':0, 'a6_02_10':0, 'a6_02_11':0, 'a6_02_12a':0, 'a6_02_12b':'', 'a6_02_13':0, 'a6_02_14':0, 'a6_02_15':0, 'a6_03':'', 'a6_04':'', 'a6_05':0, 'a6_06_1d':99, 'a6_06_1m':99, 'a6_06_1y':9999, 'a6_06_2d ':99, 'a6_06_2m':99, 'a6_06_2y':9999, 'a6_07d':99, 'a6_07m':99, 'a6_07y':9999, 'a6_08':'', 'a6_09':'', 'a6_10':0, 'a6_11':'', 'a6_12':'', 'a6_13':'', 'a6_14':'', 'a6_15':'', 'a7_01':'', 'a7_02':'', 'a7_03':'', 'a7_04':'', 'a7_05':'', 'a7_06':'', 'a7_07':'', 'a7_08':'', 'a7_09':'', 'a7_10':'', 'a7_11':'', 'a7_12':'', 'a7_13':'', 'a7_14':'', 'a7_15':'', 'a7_16':'', 'a7_17':''}

# dictionary converting variable/header names
conversionVars = {'sid':'sid', 'gen_2_1':'g2_01', 'gen_2_2a':'g2_02', 'gen_3_1':'g3_01', 'gen_4_2':'g4_02', 'gen_4_3':'g4_03a', 'gen_4_4':'g4_04', 'gen_4_5':'g4_05', 'gen_4_6':'g4_06', 'gen_4_7':'g4_07', 'gen_4_8':'g4_08', 'gen_5_1c':'g5_01d', 'gen_5_1b':'g5_01m', 'gen_5_1a':'g5_01y', 'gen_5_2':'g5_02', 'gen_5_3c':'g5_03d', 'gen_5_3b':'g5_03m', 'gen_5_3a':'g5_03y', 'gen_5_4a':'g5_04a', 'gen_5_4b':'g5_04b', 'gen_5_4c':'g5_04c', 'gen_5_5':'g5_05', 'gen_5_6':'g5_06a', 'gen_5_7':'g5_07', 'gen_5_8':'g5_08', 'adult_1_1a':'a1_01_1', 'adult_1_1b':'a1_01_2', 'adult_1_1c':'a1_01_3', 'adult_1_1d':'a1_01_4', 'adult_1_1e':'a1_01_5', 'adult_1_1f':'a1_01_6', 'adult_1_1g':'a1_01_7', 'adult_1_1h':'a1_01_8', 'adult_1_1i':'a1_01_9', 'adult_1_1j':'a1_01_10', 'adult_1_1k':'a1_01_11', 'adult_1_1l':'a1_01_12', 'adult_1_1m':'a1_01_13', 'adult_1_1n':'a1_01_14', 'adult_2_1':'a2_01a', 'adult_2_2':'a2_02', 'adult_2_3':'a2_03a', 'adult_2_3a':'a2_03b', 'adult_2_4':'a2_04', 'adult_2_5':'a2_05', 'adult_2_6':'a2_06', 'adult_2_7':'a2_07', 'adult_2_8':'a2_08a', 'adult_2_8a':'a2_08b', 'adultrash1':'a2_09_1a', 'adult_2_9a':'a2_09_1b', 'adultrash2':'a2_09_2a', 'adultrash3':'a2_09_3a', 'adult_2_10':'a2_10', 'adult_2_11':'a2_11', 'adult_2_12':'a2_12', 'adult_2_13':'a2_13', 'adult_2_14':'a2_14', 'adult_2_15':'a2_15a', 'adult_2_15a':'a2_15b', 'adult_2_16':'a2_16', 'adult_2_17':'a2_17', 'adult_2_18':'a2_18', 'adult_2_19':'a2_19', 'adult_2_20':'a2_20', 'adult_2_21':'a2_21', 'adult_2_22':'a2_22a', 'adult_2_23':'a2_23', 'adult_2_24':'a2_24a', 'adult_2_25':'a2_25', 'adult_2_26':'a2_26a', 'adult_2_27':'a2_27', 'adult_2_28':'a2_28a', 'adult_2_29':'a2_29', 'adult_2_30':'a2_30', 'adult_2_31':'a2_31', 'adult_2_32':'a2_32', 'adult_2_33':'a2_33a', 'adult_2_34':'a2_34', 'adult_2_35':'a2_35', 'adult_2_36':'a2_36', 'adult_2_37':'a2_37a', 'adult_2_38':'a2_38', 'adult_2_39':'a2_39_1', 'adult_2_40':'a2_40', 'adult_2_41':'a2_41a', 'adult_2_42':'a2_42', 'adult_2_43':'a2_43', 'adult_2_44':'a2_44', 'adult_2_45':'a2_45', 'adult_2_46':'a2_46a', 'adult_2_46a':'a2_46b', 'adult_2_47':'a2_47', 'adult_2_48':'a2_48a', 'adult_2_48a':'a2_48b', 'adult_2_49':'a2_49', 'adult_2_50':'a2_50', 'adult_2_51':'a2_51', 'adult_2_52':'a2_52', 'adult_2_53':'a2_53', 'adult_2_54':'a2_54a', 'adult_2_55':'a2_55', 'adult_2_56':'a2_56', 'adult_2_57':'a2_57', 'adult_2_58':'a2_58a', 'adult_2_59':'a2_59', 'adult_2_60':'a2_60', 'adult_2_61':'a2_61', 'adult_2_62':'a2_62a', 'adult_2_63':'a2_63_1', 'adult_2_64':'a2_64', 'adult_2_65':'a2_65a', 'adult_2_66':'a2_66', 'adult_2_67':'a2_67', 'adult_2_68':'a2_68a', 'adult_2_69':'a2_69', 'adult_2_70':'a2_70a', 'adult_2_71':'a2_71', 'adult_2_72':'a2_72', 'adult_2_73':'a2_73a', 'adult_2_74':'a2_74', 'adult_2_75':'a2_75', 'adult_2_76':'a2_76a', 'adult_2_77':'a2_77', 'adult_2_78':'a2_78', 'adult_2_79':'a2_79a', 'adult_2_80':'a2_80', 'adult_2_81':'a2_81', 'adult_2_82':'a2_82', 'adult_2_83':'a2_83a', 'adult_2_84':'a2_84', 'adult_2_85':'a2_85', 'adult_2_86':'a2_86a', 'adultparalysis1':'a2_87_1', 'adultparalysis2':'a2_87_2', 'adultparalysis3':'a2_87_3', 'adultparalysis4':'a2_87_4', 'adultparalysis5':'a2_87_5', 'adultparalysis6':'a2_87_6', 'adultparalysis7':'a2_87_7', 'adultparalysis8':'a2_87_8', 'adultparalysis9':'a2_87_9', 'adultparalysis10':'a2_87_10a', 'adult_2_87a':'a2_87_10b', 'adult_3_1':'a3_01', 'adult_3_2':'a3_02', 'adult_3_3':'a3_03', 'adult_3_4':'a3_04', 'adult_3_5':'a3_05', 'adult_3_6':'a3_06', 'adult_3_7':'a3_07', 'adult_3_8':'a3_08a', 'adult_3_8a':'a3_08b', 'adult_3_9':'a3_09', 'adult_3_10':'a3_10', 'adult_3_11':'a3_11a', 'adult_3_11a':'a3_11b', 'adult_3_12':'a3_12', 'adult_3_13':'a3_13', 'adult_3_14':'a3_14', 'adult_3_15':'a3_15', 'adult_3_16':'a3_16a', 'adult_3_16a':'a3_16b', 'adult_3_17':'a3_17', 'adult_3_18':'a3_18', 'adult_3_19':'a3_19', 'adult_3_20':'a3_20', 'adult_4_1':'a4_01', 'adult_4_2':'a4_02', 'adult_4_2a':'a4_02_5b', 'adult_4_3a':'a4_03', 'adult_4_4a':'a4_04', 'adult_4_5':'a4_05', 'adult_4_6':'a4_06', 'adult_5_1':'adult_5_1',  'adultinjury1':'a5_01_1', 'adultinjury2':'a5_01_2', 'adultinjury3':'a5_01_3', 'adultinjury4':'a5_01_4', 'adultinjury5':'a5_01_5', 'adultinjury6':'a5_01_6', 'adultinjury7':'a5_01_7', 'adultinjury8':'a5_01_9a', 'adult_5_2a':'a5_01_9b', 'adult_5_3':'a5_02', 'adult_5_4':'a5_03', 'adult_5_5':'a5_04a', 'adult_6_1':'a6_01', 'adult_6_2':'adult_6_2', 'adult_6_3':'a6_03', 'adult_6_4':'a6_04', 'adult_6_5':'a6_05', 'adult_6_6d':'a6_06_1d', 'adult_6_6c':'a6_06_1m', 'adult_6_6b':'a6_06_1y', 'adult_6_6h':'a6_06_2d ', 'adult_6_6g':'a6_06_2m', 'adult_6_6f':'a6_06_2y', 'adult_6_7c':'a6_07d', 'adult_6_7b':'a6_07m', 'adult_6_7a':'a6_07y', 'adult_6_8':'a6_08', 'adult_6_9':'a6_09', 'adult_6_10':'a6_10', 'adult_6_11':'a6_11', 'adult_6_12':'a6_12', 'adult_6_13':'a6_13', 'adult_6_14':'a6_14', 'adult_6_15':'a6_15', 'a7_01':'a7_01', 'a7_02':'a7_02', 'a7_03':'a7_03'}




class PreSymptomPrep():
    def __init__(self, notify_window, input_file, output_dir):
        self._notify_window = notify_window
        self.inputFilePath = input_file
        self.output_dir = output_dir

    def run(self):
        reader = csv.reader(open( self.inputFilePath, 'rb'))
        adultwriter = csv.writer(open(self.output_dir + os.sep + 'adult-presymptom.csv', 'wb', buffering=0))
        
        matrix = list()
        headers = list()
        
        updatestr = "Processing adult presymptom data\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
    
        first = 1
        # read in new .csv for processing
        # we add the generated headers later this time
        for row in reader:
            if first == 1:
                for col in row:    
                    headers.append(col)
                first = 0
                    
            else:
                matrix.append(row)
                
        # drop all child variables
        # must iterate over a copy because we can't change values in a list we're iterating over
        headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col.startswith("c") or col.startswith("p"):
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)
        
        #make a copy of the new list
        headers_old = copy.deepcopy(headers)
        
        error = 0
        updatestr = "Verifying answers fall within legal bounds\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))                          
        # verify that answer is within legal bounds
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                if col != '':
                    # if it's empty, we just skip it.  not sure there's a "required"
                    rangetest = rangelist.get(header)
                    if not (rangetest is  None or rangetest == '') and col not in rangelist.get(header):
                        #ERROR
                        updatestr = "value %s in row %s for col %s is not legal, please see Codebook for legal values" % (col, i, header)
                        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        if error == 0:
            updatestr = "answers verified\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        else:
            updatestr = "Errors found, not continuing\n"
            wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))    
            return 0
                    
        #TODO:  yaw did this?
        #Test skip patterns
        # for i, row in enumerate(matrix):
        #     var = "g1_08"
        #     index = headers.index(var)
        #     testvar = "g1_07a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #    
        #     var = "g5_05"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 12 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06a"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "g5_06b"
        #     index = headers.index(var)
        #     testvar = "g5_04a"
        #     testindex = headers.index(testvar)
        #     if row[testindex] < 5 or row[testindex] == 999:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #           
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #     
        #     var = "a2_03b"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_04"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     
        #     var = "a2_05"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #     var = "a2_06"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #             
        #             
        #     var = "a2_03a"
        #     index = headers.index(var)
        #     testvar = "a2_02"
        #     testindex = headers.index(testvar)
        #     if row[testindex] != 1:
        #         if row[index] != "":
        #             print "%s should have been skipped because of answer to %s in row %s." % (var, testvar, i)
        #             
        #             
                    
        
        updatestr = "Filling in default values for empty columns\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
        # fill in missing default values:
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                default = defaultFill.get(header)
                if default is not None and col == '':
                        row[i] = defaultFill[header]
                          
        #switch to new variables:
        for i, col in enumerate(headers):
            #only swap headers with values to swap
            try:
                swap = conversionVars[col]
                headers[i] = swap
            except KeyError:
                i = 1 # noop
                
                
        #add new headers:
        for newheader in generatedHeaders:
            headers.append(newheader)
        
        #create the placeholders in our matrix for new headers
        for row in matrix:
            for h in generatedHeaders:
                row.append("0")    
        
        updatestr = "Analyzing free text\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))        
        freeText = ['a5_01_9b', 'a6_08',  'a6_11', 'a6_12', 'a6_13', 'a6_14', 'a6_15', 'a7_01', 'a7_02', 'a7_03']
        
        wordsToVars = {'abdomen' : 's99991', 'arteri' : 's999910', 'kill' : 's9999100', 'knee' : 's9999101', 'labor' : 's9999102', 'leukemia' : 's9999103', 'liver' : 's9999104', 'lump' : 's9999105', 'lung' : 's9999106', 'lymphoma' : 's9999107', 'malaria' : 's9999108', 'mass' : 's9999109', 'asthma' : 's999911', 'mellitus' : 's9999110', 'mental' : 's9999111', 'motorcycl' : 's9999112', 'neck' : 's9999113', 'nephropathi' : 's9999114', 'nerv' : 's9999115', 'numb' : 's9999116', 'obstruct' : 's9999117', 'organ' : 's9999118', 'pain' : 's9999119', 'attack' : 's999912', 'paralyz' : 's9999120', 'phlegm' : 's9999121', 'pneumonia' : 's9999122', 'poison' : 's9999123', 'polic' : 's9999124', 'pregnanc' : 's9999125', 'prostat' : 's9999126', 'puffi' : 's9999127', 'pulmonari' : 's9999128', 'pus' : 's9999129', 'babi' : 's999913', 'renal' : 's9999130', 'respiratori' : 's9999131', 'ruptur' : 's9999132', 'seizur' : 's9999133', 'sepsis' : 's9999134', 'sever' : 's9999135', 'shock' : 's9999136', 'shot' : 's9999137', 'skin' : 's9999138', 'smoke' : 's9999139', 'bacteria' : 's999914', 'snake' : 's9999140', 'stomach' : 's9999141', 'stomachach' : 's9999142', 'stone' : 's9999143', 'stool' : 's9999144', 'stress' : 's9999145', 'stroke' : 's9999146', 'sugar' : 's9999147', 'suicid' : 's9999148', 'surgeri' : 's9999149', 'biopsi' : 's999915', 'suspect' : 's9999150', 'swell' : 's9999151', 'tetanus' : 's9999152', 'throat' : 's9999153', 'tongu' : 's9999154', 'transfus' : 's9999155', 'tree' : 's9999156', 'tumor' : 's9999157', 'ulcer' : 's9999158', 'ultrasound' : 's9999159', 'birth' : 's999916', 'unconsci' : 's9999160', 'urin' : 's9999161', 'uterus' : 's9999162', 'vascular' : 's9999163', 'vehicular' : 's9999164', 'virus' : 's9999165', 'vomit' : 's9999166', 'water' : 's9999167', 'womb' : 's9999168', 'wound' : 's9999169', 'bite' : 's999917', 'xray' : 's9999170', 'yellow' : 's9999171', 'black' : 's999918', 'blood' : 's999919', 'accid' : 's99992', 'bone' : 's999920', 'born' : 's999921', 'bowel' : 's999922', 'brain' : 's999923', 'breast' : 's999924', 'breath' : 's999925', 'broken' : 's999926', 'cancer' : 's999927', 'cardio' : 's999928', 'cardiomegali' : 's999929', 'alcohol' : 's99993', 'cathet' : 's999930', 'cerebr' : 's999931', 'cervix' : 's999932', 'cesarean' : 's999933', 'chemotherapi' : 's999934', 'chest' : 's999935', 'chronic' : 's999936', 'cirrhosi' : 's999937', 'clot' : 's999938', 'collaps' : 's999939', 'ami' : 's99994', 'colon' : 's999940', 'coma' : 's999941', 'congest' : 's999942', 'conscious' : 's999943', 'convuls' : 's999944', 'copd' : 's999945', 'cough' : 's999946', 'ctscan' : 's999947', 'cut' : 's999948', 'deliv' : 's999949', 'amput' : 's99995', 'depress' : 's999950', 'diabet' : 's999951', 'dialysi' : 's999952', 'diarrhea' : 's999953', 'digest' : 's999954', 'dizzi' : 's999955', 'drink' : 's999956', 'drown' : 's999957', 'dyspnea' : 's999958', 'ecg' : 's999959', 'anemia' : 's99996', 'edema' : 's999960', 'electr' : 's999961', 'encephalopathi' : 's999962', 'enlarg' : 's999963', 'epilepsi' : 's999964', 'esophag' : 's999965', 'failur' : 's999966', 'faint' : 's999967', 'fall' : 's999968', 'fever' : 's999969', 'antibiot' : 's99997', 'finger' : 's999970', 'fire' : 's999971', 'fluid' : 's999972', 'foot' : 's999973', 'fractur' : 's999974', 'goiter' : 's999975', 'hand' : 's999976', 'head' : 's999977', 'headach' : 's999978', 'heart' : 's999979', 'appetit' : 's99998', 'hematoma' : 's999980', 'hemorrhag' : 's999981', 'hepat' : 's999982', 'hernia' : 's999983', 'hiv' : 's999984', 'hypertens' : 's999985', 'hypovolem' : 's999986', 'icu' : 's999987', 'infarct' : 's999988', 'infect' : 's999989', 'arrest' : 's99999', 'inflam' : 's999990', 'inhal' : 's999991', 'injuri' : 's999992', 'intestin' : 's999993', 'intracerebr' : 's999994', 'intub' : 's999995', 'ischemia' : 's999996', 'jaundic' : 's999997', 'kerosen' : 's999998', 'kidney' : 's999999'}
        
        keyWords = wordsToVars.keys()
        
        for question in freeText:
            index = headers.index(question)
            for row in matrix:
                answer = row[index]
                answerArray = answer.split(' ')
                for word in answerArray:
                    for keyword in keyWords:
                        if word.lower().startswith(keyword):
                            svar = wordsToVars[keyword.lower()]
                            sindex = headers.index(svar)
                            row[sindex] = '1'
                        
                        
        #now do the calculations for the generated variables:
        for row in matrix:
            index = headers.index('g4_03b')
            if row[headers.index('g4_03a')] == str(11):
                row[index] = row[headers_old.index('gen_4_3a')]
            elif row[headers.index('g4_03a')] == str(12):
                row[index] = row[headers_old.index('gen_4_3b')]
            elif  row[headers.index('g4_03a')] == str(13):
                row[index] = row[headers_old.index('gen_4_3c')]
                
            index = headers.index('a2_01b')
            if row[headers.index('a2_01a')] == str(1):
                row[index] = row[headers_old.index('adult_2_1a')]
            if row[headers.index('a2_01a')] == str(2):
                row[index] = row[headers_old.index('adult_2_1b')]
            if row[headers.index('a2_01a')] == str(4):
                row[index] = row[headers_old.index('adult_2_1c')]
            if row[headers.index('a2_01a')] == str(5):
                row[index] = row[headers_old.index('adult_2_1d')]
                            
            index = headers.index('a2_22b')
            if row[headers.index('a2_22a')] == str(4):
                row[index] = row[headers_old.index('adult_2_22a')]
            if row[headers.index('a2_22a')] == str(2):
                row[index] = row[headers_old.index('adult_2_22b')]
            
            
            index = headers.index('a2_24b')
            if row[headers.index('a2_22a')] == str(4):
                row[index] = row[headers_old.index('adult_2_24a')]
            if row[headers.index('a2_22a')] == str(2):
                row[index] = row[headers_old.index('adult_2_24b')]
                
            
            index = headers.index('a2_26b')
            if row[headers.index('a2_26a')] == str(4):
                row[index] = row[headers_old.index('adult_2_26a')]
            if row[headers.index('a2_26a')] == str(2):
                row[index] = row[headers_old.index('adult_2_26b')]
                
            index = headers.index('a2_33b')
            if row[headers.index('a2_33a')] == str(4):
                row[index] = row[headers_old.index('adult_2_33a')]
            if row[headers.index('a2_33a')] == str(2):
                row[index] = row[headers_old.index('adult_2_33b')]
            
            
            index = headers.index('a2_37b')
            if row[headers.index('a2_37a')] == str(4):
                row[index] = row[headers_old.index('adult_2_37a')]
            if row[headers.index('a2_37a')] == str(2):
                row[index] = row[headers_old.index('adult_2_37b')]
                
            index = headers.index('a2_41b')
            if row[headers.index('a2_41a')] == str(4):
                row[index] = row[headers_old.index('adult_2_41a')]
            if row[headers.index('a2_41a')] == str(2):
                row[index] = row[headers_old.index('adult_2_41b')]   
                
            index = headers.index('a2_54b')
            if row[headers.index('a2_54a')] == str(5):
                row[index] = row[headers_old.index('adult_2_54a')]
            if row[headers.index('a2_54a')] == str(4):
                row[index] = row[headers_old.index('adult_2_54b')]   
                
              
            index = headers.index('a2_58b')
            if row[headers.index('a2_58a')] == str(4):
                row[index] = row[headers_old.index('adult_2_58a')]
            if row[headers.index('a2_58a')] == str(2):
                row[index] = row[headers_old.index('adult_2_58b')] 
                
            index = headers.index('a2_62b')
            if row[headers.index('a2_62a')] == str(5):
                row[index] = row[headers_old.index('adult_2_62a')]
            if row[headers.index('a2_62a')] == str(4):
                row[index] = row[headers_old.index('adult_2_62b')] 
            if row[headers.index('a2_62a')] == str(2):
                row[index] = row[headers_old.index('adult_2_62c')]  
                
            index = headers.index('a2_65b')
            if row[headers.index('a2_65a')] == str(4):
                row[index] = row[headers_old.index('adult_2_65a')]
            if row[headers.index('a2_65a')] == str(2):
                row[index] = row[headers_old.index('adult_2_65b')]    
                
            
            index = headers.index('a2_68b')
            if row[headers.index('a2_68a')] == str(4):
                row[index] = row[headers_old.index('adult_2_68a')]
            if row[headers.index('a2_68a')] == str(2):
                row[index] = row[headers_old.index('adult_2_68b')]    
              
            index = headers.index('a2_70b')
            if row[headers.index('a2_70a')] == str(5):
                row[index] = row[headers_old.index('adult_2_70a')]
            if row[headers.index('a2_70a')] == str(4):
                row[index] = row[headers_old.index('adult_2_70b')]   
            
            index = headers.index('a2_73b')
            if row[headers.index('a2_73a')] == str(4):
                row[index] = row[headers_old.index('adult_2_73a')]
            if row[headers.index('a2_73a')] == str(5):
                row[index] = row[headers_old.index('adult_2_73b')] 
            
            index = headers.index('a2_76b')
            if row[headers.index('a2_76a')] == str(4):
                row[index] = row[headers_old.index('adult_2_76b')]
            if row[headers.index('a2_76a')] == str(2):
                row[index] = row[headers_old.index('adult_2_76b')] 
                
            index = headers.index('a2_79b')
            if row[headers.index('a2_79a')] == str(4):
                row[index] = row[headers_old.index('adult_2_79a')]
            if row[headers.index('a2_79a')] == str(2):
                row[index] = row[headers_old.index('adult_2_79b')] 
            
            index = headers.index('a2_83b')
            if row[headers.index('a2_83a')] == str(6):
                row[index] = row[headers_old.index('adult_2_83a')]
            if row[headers.index('a2_83a')] == str(5):
                row[index] = row[headers_old.index('adult_2_83b')]
                
            index = headers.index('a2_86b')
            if row[headers.index('a2_86a')] == str(4):
                row[index] = row[headers_old.index('adult_2_86a')]
            if row[headers.index('a2_86a')] == str(2):
                row[index] = row[headers_old.index('adult_2_86b')]
            if row[headers.index('a2_86a')] == str(1):
                row[index] = row[headers_old.index('adult_2_86c')]
            
            #adult_4_2 can have multiple answers    
            adult42list = row[headers_old.index('adult_4_2')].split(' ')    
            if str(1) in adult42list:
                row[headers.index('a4_02_1')] = 1
            if str(2) in adult42list:
                row[headers.index('a4_02_2')] = 1
            if str(3) in adult42list:
                row[headers.index('a4_02_3')] = 1
            if str(4) in adult42list:
                row[headers.index('a4_02_4')] = 1
            if str(11) in adult42list:
                row[headers.index('a4_02_5a')] = 1
            if str(8) in adult42list:
                row[headers.index('a4_02_6')] = 5
            if str(9) in adult42list:
                row[headers.index('a4_02_7')] = 5
            
            index = headers.index('a5_01_8')
            if row[headers.index('adult_5_1')] == str(0):
                row[index] = 1
        
                
            index = headers.index('a5_04b')
            if row[headers.index('a5_04a')] == str(5):
                row[index] = row[headers_old.index('adult_5_5a')]
            if row[headers.index('a5_04a')] == str(4):
                row[index] = row[headers_old.index('adult_5_5b')]
            if row[headers.index('a5_04a')] == str(2):
                row[index] = row[headers_old.index('adult_5_5c')]
            if row[headers.index('a5_04a')] == str(1):
                row[index] = row[headers_old.index('adult_5_5d')]
            
            #adult_6_2 can have multiple answers
            adult62list = row[headers_old.index('adult_6_2')].split(' ')
            if str(1) in adult62list:
                row[headers.index('a6_02_1')] = 1
            if str(2) in adult62list:
                row[headers.index('a6_02_2')] = 1
            if str(3) in adult62list:
                row[headers.index('a6_02_3')] = 1
            if str(4) in adult62list:
                row[headers.index('a6_02_4')] = 1
            if str(5) in adult62list:
                row[headers.index('a6_02_5')] = 1
            if str(6) in adult62list:
                row[headers.index('a6_02_6')] = 1
            if str(7) in adult62list:
                row[headers.index('a6_02_8')] = 1
            if str(8) in adult62list:
                row[headers.index('a6_02_9')] = 1
            if str(9) in adult62list:
                row[headers.index('a6_02_10')] = 1
            if str(10) in adult62list:
                row[headers.index('a6_02_11')] = 1
            if str(11) in adult62list:
                row[headers.index('a6_02_12a')] = 1
            if str(12) in adult62list:
                row[headers.index('a6_02_13')] = 1
            if str(88) in adult62list:
                row[headers.index('a6_02_14')] = 1
            if str(99) in adult62list:
                row[headers.index('a6_02_15')] = 1
            
        updatestr = "Processing duration variables\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))                
        #fix duration variables    
        durationVars = ['a2_01', 'a2_03', 'a2_08', 'a2_15', 'a2_22', 'a2_24', 'a2_26', 'a2_28', 'a2_33', 'a2_37', 'a2_41', 'a2_48', 'a2_54', 'a2_58', 'a2_62', 'a2_65', 'a2_68', 'a2_70', 'a2_73', 'a2_76', 'a2_79', 'a2_83', 'a2_86', 'a3_08', 'a3_11', 'a3_16', 'a5_04']
            
        # add duration variables
        for var in durationVars:
            headers.append(var)
            for row in matrix:
                row.append("")
                    
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            bindex = headers.index(b)
            index = headers.index(var)
            
            # if var == "a2_01":
            #                print "asdf %s" % bindex
                        
            for row in matrix:
                value = row[bindex]
                v2 = row[aindex]
                
                if (value == '' or value == str(0)) and var == "a5_04":
                    # special case for injuries
                    row[index] = 999
                else:                    
                    if value == '':
                        row[index] = 0
                    else:
                        row[index] = float(value)
                    if row[aindex] == str(1):
                        row[index] = float(row[index]) * 365.0
                    if row[aindex] == str(2):
                        row[index] = float(row[index]) * 30.0
                    if row[aindex] == str(3):
                        row[index] = float(row[index]) * 7.0
                    if row[aindex] == str(5):
                        row[index] = float(row[index]) / 24.0
                    if row[aindex] == str(6):
                        row[index] = float(row[index]) / 1440.0
                    
        # drop old a/b variables
        # we do two loops to make sure we don't cross indexes, inefficient...
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            headers.remove(a)
   
            for row in matrix:
                del row[aindex]
                
            bindex = headers.index(b)
            headers.remove(b)
            for row in matrix:
                del row[bindex]
                
            
            
        #     local Adult_durs "a2_01 a2_03 a2_08 a2_15 a2_22 a2_24 a2_26 a2_28 a2_33 a2_37 a2_41 a2_48 a2_54 a2_58 a2_62 a2_65 a2_68 a2_70 a2_73 a2_76 a2_79 a2_83 a2_86 a3_08 a3_11 a3_16 a5_04"
        # local Child_durs "c1_05 c1_20 c1_21 c1_25 c2_02 c2_05 c2_10 c3_14 c3_18 c3_19 c3_21 c3_22 c3_27 c3_28 c3_30 c3_31 c4_02 c4_08 c4_10 c4_13 c4_17 c4_19 c4_33 c4_37 c4_49"
        # foreach var of local `module'_durs {
        #     gen `var' = `var'b
        #     replace `var' = `var' * 365 if `var'a == 1
        #     replace `var' = `var' * 30 if `var'a == 2
        #     replace `var' = `var' * 7 if `var'a == 3
        #     replace `var' = `var' / 24 if `var'a == 5
        #     replace `var' = `var' / 1440 if `var'a == 6
        #     order `var', before(`var'a)
        #     local name : variable label `var'b
        #     local name = "`name' [days]"
        #     label variable `var' "`name'"
        #     drop `var'a `var'b
        # }
		    
		# end loop
		
		# drop a4_02, adult_5_1	adult_6_2

        dropme = headers.index('a4_02')
        headers.remove('a4_02')
        for row in matrix:
                del row[dropme]
		    
		#get rid of all unused 'adult' headers
		headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col.startswith("adult"):
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)

        #free text
        #a5_01_9b, a6_08,  a6_11, a6_12, a6_13, a6_14, a6_15, a7_01, a7_02, a7_03
        #child/neonate c5_09,  c5_12, c5_13, c5_14, c5_15, c5_16, c6_01, c6_02, c6_03
        
        updatestr = "Writing adult-presymptom.csv\n"
        wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))                
        adultwriter.writerow(headers)
        for row in matrix:
            adultwriter.writerow(row)
                    
        return 1    	
        
        