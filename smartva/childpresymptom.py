import csv
import copy
from datetime import date
import os

from dateutil.relativedelta import relativedelta
from stemming.porter2 import stem

from smartva import default_fill_data
from smartva.answer_ranges import child_rangelist
from smartva.presymptom_conversions import child_conversionVars
from smartva.word_conversions import child_wordsToVars
from smartva.loggers import status_logger, warning_logger
from smartva.utils import status_notifier

# NOTES:
# these variables don't exist in the electronic version of the form:
# c1_09, c1_10, c1_10d, c1_10m, c1_10y, c1_19_6, c1_24,	c1_24d,	c1_24m,	c1_24y,	c1_26, c4_31_2, c5_02_11b


# new headers generated by this step in processing'
generatedHeaders = ['g4_03b', 'c1_05b', 'c1_20b', 'c1_21b', 'c2_05b', 'c4_37b', 'c4_47_11', 'c4_49b', 'c1_25a', 's180',
                    's181', 'c1_26', 'child_1_8num']


class PreSymptomPrep(object):
    def __init__(self, input_file, output_dir, shortform):
        self.inputFilePath = input_file
        self.output_dir = output_dir
        self.want_abort = 0
        self.shortform = shortform
        self.warnings = False

    def run(self):
        status_notifier.update({'progress': (7,)})

        if self.shortform:
            child_defaultFill = default_fill_data.child_short
        else:
            child_defaultFill = default_fill_data.child_defaultFill

        reader = csv.reader(open(self.inputFilePath, 'rb'))

        status_logger.info('Child :: Processing presymptom data')

        matrix = []
        headers = []

        first = 1
        # read in new .csv for processing
        # we add the generated headers later this time
        for row in reader:
            if first == 1:
                for col in row:
                    headers.append(col)
                first = 0

            else:
                matrix.append(row)

        # make sure we have data, else stop this module
        if len(matrix) < 1:
            warning_logger.debug('Child :: No data, skipping module')
            return 0

        childwriter = csv.writer(open(self.output_dir + os.sep + 'child-presymptom.csv', 'wb', buffering=0))

        # drop all adult variables
        # must iterate over a copy because we can't change values in a list we're iterating over
        headers_copy = copy.deepcopy(headers)
        for col in headers_copy:
            if col.startswith("a") and col != "agedays":
                index = headers.index(col)
                for row in matrix:
                    del row[index]
                headers.remove(col)

        # make a copy of the new list
        headers_old = copy.deepcopy(headers)

        # switch to new variables:
        for i, col in enumerate(headers):
            # only swap headers with values to swap
            try:
                swap = child_conversionVars[col]
                headers[i] = swap
            except KeyError:
                pass

        # add new headers:
        for newheader in generatedHeaders:
            headers.append(newheader)

        # create the placeholders in our matrix for new headers
        for row in matrix:
            for h in generatedHeaders:
                row.append("0")

        error = 0
        status_logger.debug('Child :: Verifying answers fall within legal bounds')
        for j, row in enumerate(matrix):
            for i, col in enumerate(row):
                header = headers[i]
                if col != '':
                    # if it's empty, we just skip it.  not sure there's a "required"
                    rangetest = child_rangelist.get(header)
                    if not (rangetest is None or rangetest == ''):
                        answerArray = col.split(' ')
                        for answer in answerArray:
                            if int(answer) not in rangetest:
                                # ERROR
                                updatestr = 'Child :: Value %s in row %s for col %s is not legal for variable %s, please see Codebook for legal values' % (col, j + 2, i + 1, header)
                                warning_logger.warning(updatestr)
                                self.warnings = True

        # TODO: this wasn't here prior to short form edits, but I think it should have been all along...?
        # do the calculations for the generated variables:
        # i.e. recode
        for row in matrix:
            index = headers.index('g4_03b')
            if row[headers.index('g4_03a')] == str(11):
                row[index] = row[headers_old.index('gen_4_3a')]
            elif row[headers.index('g4_03a')] == str(12):
                row[index] = row[headers_old.index('gen_4_3b')]
            elif row[headers.index('g4_03a')] == str(13):
                row[index] = row[headers_old.index('gen_4_3c')]

            index = headers.index('c1_05b')
            if row[headers.index('c1_05a')] == str(4):
                row[index] = row[headers_old.index('child_1_5a')]
            if row[headers.index('c1_05a')] == str(2):
                row[index] = row[headers_old.index('child_1_5b')]

            index = headers.index('c1_20b')
            if row[headers.index('c1_20a')] == str(4):
                row[index] = row[headers_old.index('child_1_20a')]
            if row[headers.index('c1_20a')] == str(2):
                row[index] = row[headers_old.index('child_1_20b')]
            if row[headers.index('c1_20a')] == str(1):
                row[index] = row[headers_old.index('child_1_20c')]

            index = headers.index('c1_21b')
            if row[headers.index('c1_21a')] == str(4):
                row[index] = row[headers_old.index('child_1_21a')]
            if row[headers.index('c1_21a')] == str(2):
                row[index] = row[headers_old.index('child_1_21b')]

            index = headers.index('c2_05b')
            if row[headers.index('c2_05a')] == str(5):
                row[index] = row[headers_old.index('child_2_5a')]
            if row[headers.index('c2_05a')] == str(4):
                row[index] = row[headers_old.index('child_2_5b')]

            index = headers.index('c4_37b')
            if row[headers.index('c4_37a')] == str(4):
                row[index] = row[headers_old.index('child_4_37a')]
            if row[headers.index('c4_37a')] == str(3):
                row[index] = row[headers_old.index('child_4_37b')]

            if row[headers.index('child_4_47')] == str(0):
                row[headers.index('c4_47_11')] = '1'

            index = headers.index('c4_49b')
            if row[headers.index('c4_49a')] == str(5):
                row[index] = row[headers_old.index('child_4_50a')]
            if row[headers.index('c4_49a')] == str(4):
                row[index] = row[headers_old.index('child_4_50b')]

            # fix child agedays.  if it's blank give it a 0, if it's not, give it a 4
            if row[headers.index('c1_25b')] == '' or row[headers.index('c1_25b')] is None:
                row[headers.index('c1_25a')] = '0'
            else:
                row[headers.index('c1_25a')] = '4'

            if (row[headers.index('c1_25b')] != '' and int(row[headers.index('c1_25b')]) >= 1 and int(
                    row[headers.index('c1_25b')]) <= 28):
                row[headers.index('c1_26')] = '1'

            # removing.. error?
            # index = headers.index('c1_06a')
            # temp = row[headers_old.index('child_1_6')]
            # if temp == '1':
            #    row[index] = '1'
            # if temp == '2':
            #    row[index] = '2'
            # if temp == '3':
            #    row[index] = '4'
            # if temp == '4':
            #    row[index] = '5'
            # if temp == '5':
            #    row[index] = '6'

            child_1_8a = row[headers_old.index('child_1_8a')]
            child_1_8b = row[headers_old.index('child_1_8b')]
            if child_1_8a == '' or child_1_8a is None:
                child_1_8a = '0'
            if child_1_8b == '' or child_1_8b is None:
                child_1_8b = '0'
            if child_1_8b != 0:
                child_1_8b = int(child_1_8b) * 1000
            row[headers.index('child_1_8num')] = float(child_1_8a) + float(child_1_8b)

            child_1_8 = row[headers_old.index('child_1_8')]
            if child_1_8 == '2':
                row[headers_old.index('child_1_8')] = '1'

            index = headers.index('c4_33b')
            temp = row[headers.index('c4_33a')]
            if temp != '4':
                # row[index] = row[headers_old.index('child_4_33a')]
                row[index] = '0'

            # added for shortform
            if self.shortform:
                index = headers.index('c1_22a')
                temp = row[headers_old.index('child_1_22')]
                if temp == '1':
                    row[index] = '1'
                if temp == '2':
                    row[index] = '2'
                if temp == '3':
                    row[index] = '4'
                if temp == '4':
                    row[index] = '5'
                if temp == '5':
                    row[index] = '6'
                if temp == '8':
                    row[index] = '8'
                if temp == '9':
                    row[index] = '9'

                index = headers.index('c2_01_1')
                temp = row[headers_old.index('complications1')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_2')
                temp = row[headers_old.index('complications2')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_3')
                temp = row[headers_old.index('complications3')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_4')
                temp = row[headers_old.index('complications4')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_5')
                temp = row[headers_old.index('complications5')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_6')
                temp = row[headers_old.index('complications6')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_7')
                temp = row[headers_old.index('complications7')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_8')
                temp = row[headers_old.index('complications8')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_9')
                temp = row[headers_old.index('complications9')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_10')
                temp = row[headers_old.index('complications10')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_11')
                temp = row[headers_old.index('complications11')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c2_01_12')
                temp = row[headers_old.index('complications12')]
                if temp == '1':
                    row[index] = '1'

                index = headers.index('c3_03_1')
                temp = row[headers_old.index('childabnorm1')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c3_03_2')
                temp = row[headers_old.index('childabnorm2')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c3_03_3')
                temp = row[headers_old.index('childabnorm3')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c3_03_4a')
                temp = row[headers_old.index('childabnorm4')]
                if temp == '1':
                    row[index] = '1'
                index = headers.index('c3_03_5')
                temp = row[headers_old.index('childabnorm5')]
                if temp == '1':
                    row[index] = '1'

                index = headers.index('c4_08a')
                temp = row[headers_old.index('child_4_8')]
                if temp == '2':
                    row[index] = '1'

                index = headers.index('c4_07b')
                testval = row[headers.index('c4_07a')]
                if testval != '1':
                    row[index] = '0'  # just to make sure that c4_07b doesn't get child_4_7a like in the long form

        # Test skip patterns
        for i, row in enumerate(matrix):
            # i starts at 0, header row is 1 in excel, so do i+2 for the actual data row
            c1_01 = row[headers.index('c1_01')]
            if c1_01 != '2':
                c1_02 = row[headers.index('c1_02')]
                if not (c1_02 is None or c1_02 == ''):
                    self.printWarning('c1_02', i, row, headers, child_defaultFill)
            c1_03 = row[headers.index('c1_03')]
            if c1_03 == '1':
                c1_04 = row[headers.index('c1_04')]
                if not (c1_04 is None or c1_04 == ''):
                    self.printWarning('c1_04', i, row, headers, child_defaultFill)
            c1_04 = row[headers.index('c1_04')]
            if c1_04 == '1' or c1_03 == '1':
                c1_05a = row[headers.index('c1_05a')]
                if not (c1_05a is None or c1_05a == ''):
                    self.printWarning('c1_05a', i, row, headers, child_defaultFill)
                c1_05b = row[headers.index('c1_05b')]
                if not (c1_05b is None or c1_05b == '' or c1_05b == '0'):
                    self.printWarning('c1_05b', i, row, headers, child_defaultFill)
            c1_15 = row[headers.index('c1_15')]
            if c1_15 == '0':
                c1_16 = row[headers.index('c1_16')]
                if not (c1_16 is None or c1_16 == ''):
                    self.printWarning('c1_16', i, row, headers, child_defaultFill)
                c1_17 = row[headers.index('c1_17')]
                if not (c1_17 is None or c1_17 == ''):
                    self.printWarning('c1_17', i, row, headers, child_defaultFill)
                c1_18 = row[headers.index('c1_18')]
                if not (c1_18 is None or c1_18 == ''):
                    self.printWarning('c1_18', i, row, headers, child_defaultFill)
            c1_18 = row[headers.index('c1_18')]
            if c1_15 == '0' or c1_18 != '1':
                c1_19_1 = row[headers.index('c1_19_1')]
                if not (c1_19_1 is None or c1_19_1 == '' or c1_19_1 == '0'):
                    self.printWarning('c1_19_1', i, row, headers, child_defaultFill)
                c1_19_2 = row[headers.index('c1_19_2')]
                if not (c1_19_2 is None or c1_19_2 == '' or c1_19_2 == '0'):
                    self.printWarning('c1_19_2', i, row, headers, child_defaultFill)
                c1_19_3 = row[headers.index('c1_19_3')]
                if not (c1_19_3 is None or c1_19_3 == '' or c1_19_3 == '0'):
                    self.printWarning('c1_19_3', i, row, headers, child_defaultFill)
                c1_19_4a = row[headers.index('c1_19_4a')]
                if not (c1_19_4a is None or c1_19_4a == '' or c1_19_4a == '0'):
                    self.printWarning('c1_19_4a', i, row, headers, child_defaultFill)
                c1_19_4b = row[headers.index('c1_19_4b')]
                if not (c1_19_4b is None or c1_19_4b == ''):
                    self.printWarning('c1_19_4b', i, row, headers, child_defaultFill)
                c1_19_5 = row[headers.index('c1_19_5')]
                if not (c1_19_5 is None or c1_19_5 == '' or c1_19_5 == '0'):
                    self.printWarning('c1_19_5', i, row, headers, child_defaultFill)
                # not in electronic version
                # c1_19_6 = row[headers.index('c1_19_6')]
                #                 if not (c1_19_6 is None or c1_19_6 == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c1_19_6 should be blank, setting to default and continuing' % (i+2, headers.index('c1_19_6'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c1_19_6')] = str(child_defaultFill.get(''))
            if c1_15 == '1':
                c1_20a = row[headers.index('c1_20a')]
                if not (c1_20a is None or c1_20a == ''):
                    self.printWarning('c1_20a', i, row, headers, child_defaultFill)
                c1_20b = row[headers.index('c1_20b')]
                if not (c1_20b is None or c1_20b == '' or c1_20b == '0'):
                    self.printWarning('c1_20b', i, row, headers, child_defaultFill)
                c1_21a = row[headers.index('c1_21a')]
                if not (c1_21a is None or c1_21a == ''):
                    self.printWarning('c1_21a', i, row, headers, child_defaultFill)
                c1_21b = row[headers.index('c1_21b')]
                if not (c1_21b is None or c1_21b == '' or c1_21b == '0'):
                    self.printWarning('c1_21b', i, row, headers, child_defaultFill)
                c1_22a = row[headers.index('c1_22a')]
                if not (c1_22a is None or c1_22a == ''):
                    self.printWarning('c1_22a', i, row, headers, child_defaultFill)
                c1_22b = row[headers.index('c1_22b')]
                if not (c1_22b is None or c1_22b == ''):
                    self.printWarning('c1_22b', i, row, headers, child_defaultFill)
                c1_23 = row[headers.index('c1_23')]
                if not (c1_23 is None or c1_23 == ''):
                    self.printWarning('c1_23', i, row, headers, child_defaultFill)
                # not in electronic version
                # c1_24 = row[headers.index('c1_24')]
                #                 if not (c1_24 is None or c1_24 == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c1_24 should be blank, setting to default and continuing' % (i+2, headers.index('c1_24'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c1_24')] = str(child_defaultFill.get(''))
                #                 c1_24d = row[headers.index('c1_24d')]
                #                 if not (c1_24d is None or c1_24d == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c1_24d should be blank, setting to default and continuing' % (i+2, headers.index('c1_24d'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c1_24d')] = str(child_defaultFill.get(''))
                #                 c1_24m = row[headers.index('c1_24m')]
                #                 if not (c1_24m is None or c1_24m == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c1_24m should be blank, setting to default and continuing' % (i+2, headers.index('c1_24m'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c1_24m')] = str(child_defaultFill.get(''))
                #                 c1_24y = row[headers.index('c1_24y')]
                #                 if not (c1_24y is None or c1_24y == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c1_24y should be blank, setting to default and continuing' % (i+2, headers.index('c1_24y'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c1_24y')] = str(child_defaultFill.get(''))
                c1_25a = row[headers.index('c1_25a')]
                if not (c1_25a is None or c1_25a == '' or c1_25a == '0'):
                    self.printWarning('c1_25a', i, row, headers, child_defaultFill)
                c1_25b = row[headers.index('c1_25b')]
                if not (c1_25b is None or c1_25b == ''):
                    self.printWarning('c1_25b', i, row, headers, child_defaultFill)
                c1_26 = row[headers.index('c1_26')]
                if not (c1_26 is None or c1_26 == '' or c1_26 == '0'):
                    self.printWarning('c1_26', i, row, headers, child_defaultFill)
            c1_26 = row[headers.index('c1_26')]
            if c1_15 == '1' or c1_26 == '1':
                c4_01 = row[headers.index('c4_01')]
                if not (c4_01 is None or c4_01 == ''):
                    self.printWarning('c4_01', i, row, headers, child_defaultFill)
                c4_06 = row[headers.index('c4_06')]
                if not (c4_06 is None or c4_06 == ''):
                    self.printWarning('c4_06', i, row, headers, child_defaultFill)
                c4_12 = row[headers.index('c4_12')]
                if not (c4_12 is None or c4_12 == ''):
                    self.printWarning('c4_12', i, row, headers, child_defaultFill)
                c4_16 = row[headers.index('c4_16')]
                if not (c4_16 is None or c4_16 == ''):
                    self.printWarning('c4_16', i, row, headers, child_defaultFill)
                c4_18 = row[headers.index('c4_18')]
                if not (c4_18 is None or c4_18 == ''):
                    self.printWarning('c4_18', i, row, headers, child_defaultFill)
                c4_25 = row[headers.index('c4_25')]
                if not (c4_25 is None or c4_25 == ''):
                    self.printWarning('c4_25', i, row, headers, child_defaultFill)
                c4_26 = row[headers.index('c4_26')]
                if not (c4_26 is None or c4_26 == ''):
                    self.printWarning('c4_26', i, row, headers, child_defaultFill)
                c4_28 = row[headers.index('c4_28')]
                if not (c4_28 is None or c4_28 == ''):
                    self.printWarning('c4_28', i, row, headers, child_defaultFill)
                c4_29 = row[headers.index('c4_29')]
                if not (c4_29 is None or c4_29 == ''):
                    self.printWarning('c4_29', i, row, headers, child_defaultFill)
                c4_30 = row[headers.index('c4_30')]
                if not (c4_30 is None or c4_30 == ''):
                    self.printWarning('c4_30', i, row, headers, child_defaultFill)
                c4_35 = row[headers.index('c4_35')]
                if not (c4_35 is None or c4_35 == ''):
                    self.printWarning('c4_35', i, row, headers, child_defaultFill)
                c4_36 = row[headers.index('c4_36')]
                if not (c4_36 is None or c4_36 == ''):
                    self.printWarning('c4_36', i, row, headers, child_defaultFill)
                c4_38 = row[headers.index('c4_38')]
                if not (c4_38 is None or c4_38 == ''):
                    self.printWarning('c4_38', i, row, headers, child_defaultFill)
                c4_39 = row[headers.index('c4_39')]
                if not (c4_39 is None or c4_39 == ''):
                    self.printWarning('c4_39', i, row, headers, child_defaultFill)
                c4_40 = row[headers.index('c4_40')]
                if not (c4_40 is None or c4_40 == ''):
                    self.printWarning('c4_40', i, row, headers, child_defaultFill)
                c4_41 = row[headers.index('c4_41')]
                if not (c4_41 is None or c4_41 == ''):
                    self.printWarning('c4_41', i, row, headers, child_defaultFill)
                c4_42 = row[headers.index('c4_42')]
                if not (c4_42 is None or c4_42 == ''):
                    self.printWarning('c4_42', i, row, headers, child_defaultFill)
                c4_43 = row[headers.index('c4_43')]
                if not (c4_43 is None or c4_43 == ''):
                    self.printWarning('c4_43', i, row, headers, child_defaultFill)
                c4_44 = row[headers.index('c4_44')]
                if not (c4_44 is None or c4_44 == ''):
                    self.printWarning('c4_44', i, row, headers, child_defaultFill)
                c4_46 = row[headers.index('c4_46')]
                if not (c4_46 is None or c4_46 == ''):
                    self.printWarning('c4_46', i, row, headers, child_defaultFill)
                c4_47_1 = row[headers.index('c4_47_1')]
                if not (c4_47_1 is None or c4_47_1 == '' or c4_47_1 == '0'):
                    self.printWarning('c4_47_1', i, row, headers, child_defaultFill)
                c4_47_10 = row[headers.index('c4_47_10')]
                if not (c4_47_10 is None or c4_47_10 == '' or c4_47_10 == '0'):
                    self.printWarning('c4_47_10', i, row, headers, child_defaultFill)
                c4_47_11 = row[headers.index('c4_47_11')]
                if not (c4_47_11 is None or c4_47_11 == '' or c4_47_11 == '0'):
                    self.printWarning('c4_47_11', i, row, headers, child_defaultFill)
                c4_47_2 = row[headers.index('c4_47_2')]
                if not (c4_47_2 is None or c4_47_2 == '' or c4_47_2 == '0'):
                    self.printWarning('c4_47_2', i, row, headers, child_defaultFill)
                c4_47_3 = row[headers.index('c4_47_3')]
                if not (c4_47_3 is None or c4_47_3 == '' or c4_47_3 == '0'):
                    self.printWarning('c4_47_3', i, row, headers, child_defaultFill)
                c4_47_4 = row[headers.index('c4_47_4')]
                if not (c4_47_4 is None or c4_47_4 == '' or c4_47_4 == '0'):
                    self.printWarning('c4_47_4', i, row, headers, child_defaultFill)
                c4_47_5 = row[headers.index('c4_47_5')]
                if not (c4_47_5 is None or c4_47_5 == '' or c4_47_5 == '0'):
                    self.printWarning('c4_47_5', i, row, headers, child_defaultFill)
                c4_47_6 = row[headers.index('c4_47_6')]
                if not (c4_47_6 is None or c4_47_6 == '' or c4_47_6 == '0'):
                    self.printWarning('c4_47_6', i, row, headers, child_defaultFill)
                c4_47_7 = row[headers.index('c4_47_7')]
                if not (c4_47_7 is None or c4_47_7 == '' or c4_47_7 == '0'):
                    self.printWarning('c4_47_7', i, row, headers, child_defaultFill)
                c4_47_8a = row[headers.index('c4_47_8a')]
                if not (c4_47_8a is None or c4_47_8a == '' or c4_47_8a == '0'):
                    self.printWarning('c4_47_8a', i, row, headers, child_defaultFill)
                c4_47_8b = row[headers.index('c4_47_8b')]
                if not (c4_47_8b is None or c4_47_8b == ''):
                    self.printWarning('c4_47_8b', i, row, headers, child_defaultFill)
                c4_47_9 = row[headers.index('c4_47_9')]
                if not (c4_47_9 is None or c4_47_9 == '' or c4_47_9 == '0'):
                    self.printWarning('c4_47_9', i, row, headers, child_defaultFill)
            c4_16 = row[headers.index('c4_16')]
            c4_18 = row[headers.index('c4_18')]
            if c1_15 == '1' or c1_26 == '1' or (c4_16 == '0' and c4_18 == '0'):
                c4_20 = row[headers.index('c4_20')]
                if not (c4_20 is None or c4_20 == ''):
                    self.printWarning('c4_20', i, row, headers, child_defaultFill)
                c4_22 = row[headers.index('c4_22')]
                if not (c4_22 is None or c4_22 == ''):
                    self.printWarning('c4_22', i, row, headers, child_defaultFill)
                c4_23 = row[headers.index('c4_23')]
                if not (c4_23 is None or c4_23 == ''):
                    self.printWarning('c4_23', i, row, headers, child_defaultFill)
                c4_24 = row[headers.index('c4_24')]
                if not (c4_24 is None or c4_24 == ''):
                    self.printWarning('c4_24', i, row, headers, child_defaultFill)
            c4_01 = row[headers.index('c4_01')]
            if c1_15 == '1' or c1_26 == '1' or c4_01 != '1':
                c4_02a = row[headers.index('c4_02a')]
                if not (c4_02a is None or c4_02a == ''):
                    self.printWarning('c4_02a', i, row, headers, child_defaultFill)
                c4_02b = row[headers.index('c4_02b')]
                if not (c4_02b is None or c4_02b == ''):
                    self.printWarning('c4_02b', i, row, headers, child_defaultFill)
                c4_03 = row[headers.index('c4_03')]
                if not (c4_03 is None or c4_03 == ''):
                    self.printWarning('c4_03', i, row, headers, child_defaultFill)
            c4_03 = row[headers.index('c4_03')]
            if c1_15 == '1' or c1_26 == '1' or c4_01 != '1' or c4_03 != '1':
                c4_04 = row[headers.index('c4_04')]
                if not (c4_04 is None or c4_04 == ''):
                    self.printWarning('c4_20', i, row, headers, child_defaultFill)
                c4_05 = row[headers.index('c4_04')]
                if not (c4_05 is None or c4_05 == ''):
                    self.printWarning('c4_05', i, row, headers, child_defaultFill)
            c4_06 = row[headers.index('c4_06')]
            if c1_15 == '1' or c1_26 == '1' or c4_06 != '1':
                c4_07a = row[headers.index('c4_07a')]
                if not (c4_07a is None or c4_07a == ''):
                    self.printWarning('c4_07a', i, row, headers, child_defaultFill)
                c4_07b = row[headers.index('c4_07b')]
                if not (c4_07b is None or c4_07b == ''):
                    self.printWarning('c4_07b', i, row, headers, child_defaultFill)
                c4_08a = row[headers.index('c4_08a')]
                if not (c4_08a is None or c4_08a == ''):
                    self.printWarning('c4_08a', i, row, headers, child_defaultFill)
                c4_08b = row[headers.index('c4_08b')]
                if not (c4_08b is None or c4_08b == ''):
                    self.printWarning('c4_08b', i, row, headers, child_defaultFill)
            c4_08a = row[headers.index('c4_08a')]
            if c1_15 == '1' or c1_26 == '1' or c4_06 != '1' or c4_08a == '5' or c4_08a == '6':
                c4_09 = row[headers.index('c4_09')]
                if not (c4_09 is None or c4_09 == ''):
                    self.printWarning('c4_09', i, row, headers, child_defaultFill)
                c4_11 = row[headers.index('c4_11')]
                if not (c4_11 is None or c4_11 == ''):
                    self.printWarning('c4_11', i, row, headers, child_defaultFill)
            c4_09 = row[headers.index('c4_09')]
            if c1_15 == '1' or c1_26 == '1' or c4_06 != '1' or c4_08a == '5' or c4_08a == '6' or c4_09 == '1':
                c4_10a = row[headers.index('c4_10a')]
                if not (c4_10a is None or c4_10a == ''):
                    self.printWarning('c4_10a', i, row, headers, child_defaultFill)
                c4_10b = row[headers.index('c4_10b')]
                if not (c4_10b is None or c4_10b == ''):
                    self.printWarning('c4_10b', i, row, headers, child_defaultFill)
            c4_12 = row[headers.index('c4_12')]
            if c1_15 == '1' or c1_26 == '1' or c4_12 != '1':
                c4_13a = row[headers.index('c4_13a')]
                if not (c4_13a is None or c4_13a == ''):
                    self.printWarning('c4_13a', i, row, headers, child_defaultFill)
                c4_13b = row[headers.index('c4_13b')]
                if not (c4_13b is None or c4_13b == ''):
                    self.printWarning('c4_13b', i, row, headers, child_defaultFill)
                c4_14 = row[headers.index('c4_14')]
                if not (c4_14 is None or c4_14 == ''):
                    self.printWarning('c4_14', i, row, headers, child_defaultFill)
                c4_15 = row[headers.index('c4_15')]
                if not (c4_15 is None or c4_15 == ''):
                    self.printWarning('c4_15', i, row, headers, child_defaultFill)
            c4_16 = row[headers.index('c4_16')]
            if c1_15 == '1' or c1_26 == '1' or c4_16 != '1':
                c4_17a = row[headers.index('c4_17a')]
                if not (c4_17a is None or c4_17a == ''):
                    self.printWarning('c4_17a', i, row, headers, child_defaultFill)
                c4_17b = row[headers.index('c4_17b')]
                if not (c4_17b is None or c4_17b == ''):
                    self.printWarning('c4_17b', i, row, headers, child_defaultFill)
            c4_18 = row[headers.index('c4_18')]
            if c1_15 == '1' or c1_26 == '1' or c4_18 != '1':
                c4_19a = row[headers.index('c4_19a')]
                if not (c4_19a is None or c4_19a == ''):
                    self.printWarning('c4_19a', i, row, headers, child_defaultFill)
                c4_19b = row[headers.index('c4_19b')]
                if not (c4_19b is None or c4_19b == ''):
                    self.printWarning('c4_19b', i, row, headers, child_defaultFill)
            c4_26 = row[headers.index('c4_26')]
            if c1_15 == '1' or c1_26 == '1' or c4_26 != '1':
                c4_27 = row[headers.index('c4_27')]
                if not (c4_27 is None or c4_27 == ''):
                    self.printWarning('c4_27', i, row, headers, child_defaultFill)
            c4_30 = row[headers.index('c4_30')]
            if c1_15 == '1' or c1_26 == '1' or c4_30 != '1':
                c4_31_1 = row[headers.index('c4_31_1')]
                if not (c4_31_1 is None or c4_31_1 == ''):
                    self.printWarning('c4_31_1', i, row, headers, child_defaultFill)
                # not in electronic version
                # c4_31_2 = row[headers.index('c4_31_2')]
                #                 if not (c4_31_2 is None or c4_31_2 == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c4_31_2 should be blank, setting to default and continuing' % (i+2, headers.index('c4_31_2'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c4_31_2')] = str(child_defaultFill.get(''))
                c4_32 = row[headers.index('c4_32')]
                if not (c4_32 is None or c4_32 == ''):
                    self.printWarning('c4_32', i, row, headers, child_defaultFill)
                c4_33a = row[headers.index('c4_33a')]
                if not (c4_33a is None or c4_33a == ''):
                    self.printWarning('c4_33a', i, row, headers, child_defaultFill)
                c4_33b = row[headers.index('c4_33b')]
                if not (c4_33b is None or c4_33b == ''):
                    self.printWarning('c4_33b', i, row, headers, child_defaultFill)
                c4_34 = row[headers.index('c4_34')]
                if not (c4_34 is None or c4_34 == ''):
                    self.printWarning('c4_34', i, row, headers, child_defaultFill)
            c4_36 = row[headers.index('c4_36')]
            if c1_15 == '1' or c1_26 == '1' or c4_36 != '1':
                c4_37a = row[headers.index('c4_37a')]
                if not (c4_37a is None or c4_37a == ''):
                    self.printWarning('c4_37a', i, row, headers, child_defaultFill)
                c4_37b = row[headers.index('c4_37b')]
                if not (c4_37b is None or c4_37b == '' or c4_37b == '0'):
                    self.printWarning('c4_37b', i, row, headers, child_defaultFill)
            c4_44 = row[headers.index('c4_44')]
            if c1_15 == '1' or c1_26 == '1' or c4_44 != '1':
                c4_45 = row[headers.index('c4_45')]
                if not (c4_45 is None or c4_45 == ''):
                    self.printWarning('c4_45', i, row, headers, child_defaultFill)
            c4_47_11 = row[headers.index('c4_47_11')]
            if c1_15 == '1' or c1_26 == '1' or c4_47_11 == '1':
                c4_48 = row[headers.index('c4_48')]
                if not (c4_48 is None or c4_48 == ''):
                    self.printWarning('c4_48', i, row, headers, child_defaultFill)
                c4_49a = row[headers.index('c4_49a')]
                if not (c4_49a is None or c4_49a == ''):
                    self.printWarning('c4_49a', i, row, headers, child_defaultFill)
                c4_49b = row[headers.index('c4_49b')]
                if not (c4_49b is None or c4_49b == '' or c4_49b == '0'):
                    self.printWarning('c4_49b', i, row, headers, child_defaultFill)
            if c1_15 == '1' or c1_26 == '2':
                c3_01 = row[headers.index('c3_01')]
                if not (c3_01 is None or c3_01 == ''):
                    self.printWarning('c3_01', i, row, headers, child_defaultFill)
                c3_02 = row[headers.index('c3_02')]
                if not (c3_02 is None or c3_02 == ''):
                    self.printWarning('c3_02', i, row, headers, child_defaultFill)
                c3_04 = row[headers.index('c3_04')]
                if not (c3_04 is None or c3_04 == ''):
                    self.printWarning('c3_04', i, row, headers, child_defaultFill)
                c3_06 = row[headers.index('c3_06')]
                if not (c3_06 is None or c3_06 == ''):
                    self.printWarning('c3_06', i, row, headers, child_defaultFill)
                c3_07 = row[headers.index('c3_07')]
                if not (c3_07 is None or c3_07 == ''):
                    self.printWarning('c3_07', i, row, headers, child_defaultFill)
                c3_11 = row[headers.index('c3_11')]
                if not (c3_11 is None or c3_11 == ''):
                    self.printWarning('c3_11', i, row, headers, child_defaultFill)
                c3_17 = row[headers.index('c3_17')]
                if not (c3_17 is None or c3_17 == ''):
                    self.printWarning('c3_17', i, row, headers, child_defaultFill)
                c3_20 = row[headers.index('c3_20')]
                if not (c3_20 is None or c3_20 == ''):
                    self.printWarning('c3_20', i, row, headers, child_defaultFill)
                c3_23 = row[headers.index('c3_23')]
                if not (c3_23 is None or c3_23 == ''):
                    self.printWarning('c3_23', i, row, headers, child_defaultFill)
                c3_24 = row[headers.index('c3_24')]
                if not (c3_24 is None or c3_24 == ''):
                    self.printWarning('c3_24', i, row, headers, child_defaultFill)
                c3_25 = row[headers.index('c3_25')]
                if not (c3_25 is None or c3_25 == ''):
                    self.printWarning('c3_25', i, row, headers, child_defaultFill)
                c3_26 = row[headers.index('c3_26')]
                if not (c3_26 is None or c3_26 == ''):
                    self.printWarning('c3_26', i, row, headers, child_defaultFill)
                c3_29 = row[headers.index('c3_29')]
                if not (c3_29 is None or c3_29 == ''):
                    self.printWarning('c3_29', i, row, headers, child_defaultFill)
                c3_32 = row[headers.index('c3_32')]
                if not (c3_32 is None or c3_32 == ''):
                    self.printWarning('c3_32', i, row, headers, child_defaultFill)
                c3_33 = row[headers.index('c3_33')]
                if not (c3_33 is None or c3_33 == ''):
                    self.printWarning('c3_33', i, row, headers, child_defaultFill)
                c3_34 = row[headers.index('c3_34')]
                if not (c3_34 is None or c3_34 == ''):
                    self.printWarning('c3_34', i, row, headers, child_defaultFill)
                c3_35 = row[headers.index('c3_35')]
                if not (c3_35 is None or c3_35 == ''):
                    self.printWarning('c3_35', i, row, headers, child_defaultFill)
                c3_36 = row[headers.index('c3_36')]
                if not (c3_36 is None or c3_36 == ''):
                    self.printWarning('c3_36', i, row, headers, child_defaultFill)
                c3_38 = row[headers.index('c3_38')]
                if not (c3_38 is None or c3_38 == ''):
                    self.printWarning('c3_38', i, row, headers, child_defaultFill)
                c3_39 = row[headers.index('c3_39')]
                if not (c3_39 is None or c3_39 == ''):
                    self.printWarning('c3_39', i, row, headers, child_defaultFill)
                c3_40 = row[headers.index('c3_40')]
                if not (c3_40 is None or c3_40 == ''):
                    self.printWarning('c3_40', i, row, headers, child_defaultFill)
                c3_41 = row[headers.index('c3_41')]
                if not (c3_41 is None or c3_41 == ''):
                    self.printWarning('c3_41', i, row, headers, child_defaultFill)
                c3_42 = row[headers.index('c3_42')]
                if not (c3_42 is None or c3_42 == ''):
                    self.printWarning('c3_42', i, row, headers, child_defaultFill)
                c3_44 = row[headers.index('c3_44')]
                if not (c3_44 is None or c3_44 == ''):
                    self.printWarning('c3_44', i, row, headers, child_defaultFill)
                c3_46 = row[headers.index('c3_46')]
                if not (c3_46 is None or c3_46 == ''):
                    self.printWarning('c3_46', i, row, headers, child_defaultFill)
                c3_47 = row[headers.index('c3_47')]
                if not (c3_47 is None or c3_47 == ''):
                    self.printWarning('c3_47', i, row, headers, child_defaultFill)
                c3_48 = row[headers.index('c3_48')]
                if not (c3_48 is None or c3_48 == ''):
                    self.printWarning('c3_48', i, row, headers, child_defaultFill)
                c3_49 = row[headers.index('c3_49')]
                if not (c3_49 is None or c3_49 == ''):
                    self.printWarning('c3_49', i, row, headers, child_defaultFill)
            c3_02 = row[headers.index('c3_02')]
            if c1_15 == '1' or c1_26 == '2' or c3_02 != '1':
                c3_03_1 = row[headers.index('c3_03_1')]
                if not (c3_03_1 is None or c3_03_1 == '' or c3_03_1 == '0'):
                    self.printWarning('c3_03_1', i, row, headers, child_defaultFill)
                c3_03_2 = row[headers.index('c3_03_2')]
                if not (c3_03_2 is None or c3_03_2 == '' or c3_03_2 == '0'):
                    self.printWarning('c3_03_2', i, row, headers, child_defaultFill)
                c3_03_3 = row[headers.index('c3_03_3')]
                if not (c3_03_3 is None or c3_03_3 == '' or c3_03_3 == '0'):
                    self.printWarning('c3_03_3', i, row, headers, child_defaultFill)
                c3_03_4a = row[headers.index('c3_03_4a')]
                if not (c3_03_4a is None or c3_03_4a == '' or c3_03_4a == '0'):
                    self.printWarning('c3_03_4a', i, row, headers, child_defaultFill)
                c3_03_4b = row[headers.index('c3_03_4b')]
                if not (c3_03_4b is None or c3_03_4b == ''):
                    self.printWarning('c3_03_4b', i, row, headers, child_defaultFill)
                c3_03_5 = row[headers.index('c3_03_5')]
                if not (c3_03_5 is None or c3_03_5 == '' or c3_03_5 == '0'):
                    self.printWarning('c3_03_5', i, row, headers, child_defaultFill)
                # not in electronic version
                # c3_03_6 = row[headers.index('c3_03_6')]
                #                 if not (c3_03_6 is None or c3_03_6 == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c3_03_6 should be blank, setting to default and continuing' % (i+2, headers.index('c3_03_6'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c3_03_6')] = str(child_defaultFill.get(''))
            c3_04 = row[headers.index('c3_04')]
            if c1_15 == '1' or c1_26 == '2' or c3_04 == '0':
                c3_05 = row[headers.index('c3_05')]
                if not (c3_05 is None or c3_05 == ''):
                    self.printWarning('c3_05', i, row, headers, child_defaultFill)
            c3_07 = row[headers.index('c3_07')]
            if c1_15 == '1' or c1_26 == '2' or c3_07 == '1':
                c3_08 = row[headers.index('c3_08')]
                if not (c3_08 is None or c3_08 == ''):
                    self.printWarning('c3_08', i, row, headers, child_defaultFill)
            c3_08 = row[headers.index('c3_08')]
            if c1_15 == '1' or c1_26 == '2' or c3_08 == '4':
                c3_09 = row[headers.index('c3_09')]
                if not (c3_09 is None or c3_09 == ''):
                    self.printWarning('c3_09', i, row, headers, child_defaultFill)
            c3_09 = row[headers.index('c3_09')]
            if c1_15 == '1' or c1_26 == '2' or c3_08 == '4' or c3_09 != '1':
                c3_10 = row[headers.index('c3_10')]
                if not (c3_10 is None or c3_10 == ''):
                    self.printWarning('c3_10', i, row, headers, child_defaultFill)
            c3_11 = row[headers.index('c3_11')]
            # This is a unique case because c3_12 can have different 'default' values depending on other variables
            if c1_15 == '1':
                c3_12 = row[headers.index('c3_12')]
                if c3_12 != '0':
                    updatestr = 'Child :: Value at row %s col %s for variable c3_12 should be 0, setting to 0 and continuing' % (i + 2, headers.index('c3_12'))
                    warning_logger.warning(updatestr)
                    row[headers.index('c3_12')] = '0'
            elif c1_26 == '2' or c3_11 == '1':
                c3_12 = row[headers.index('c3_12')]
                if c3_12 != '1':
                    updatestr = 'Child :: Value at row %s col %s for variable c3_12 should be 1, setting to default and continuing' % (i + 2, headers.index('c3_12'))
                    warning_logger.warning(updatestr)
                    row[headers.index('c3_12')] = '1'
            c3_12 = row[headers.index('c3_12')]
            if c1_15 == '1' or c1_26 == '2' or c3_12 != '1':
                c3_13 = row[headers.index('c3_13')]
                if not (c3_13 is None or c3_13 == ''):
                    self.printWarning('c3_13', i, row, headers, child_defaultFill)
            c3_13 = row[headers.index('c3_13')]
            if c1_15 == '1' or c1_26 == '2' or c3_12 != '1' or c3_13 != '1':
                c3_14a = row[headers.index('c3_14a')]
                if not (c3_14a is None or c3_14a == ''):
                    self.printWarning('c3_14a', i, row, headers, child_defaultFill)
                c3_14b = row[headers.index('c3_14b')]
                if not (c3_14b is None or c3_14b == ''):
                    self.printWarning('c3_14b', i, row, headers, child_defaultFill)
                c3_15 = row[headers.index('c3_15')]
                if not (c3_15 is None or c3_15 == ''):
                    self.printWarning('c3_15', i, row, headers, child_defaultFill)
                c3_16 = row[headers.index('c3_16')]
                if not (c3_16 is None or c3_16 == ''):
                    self.printWarning('c3_16', i, row, headers, child_defaultFill)
            c3_17 = row[headers.index('c3_17')]
            if c1_15 == '1' or c1_26 == '2' or c3_17 != '1':
                c3_18a = row[headers.index('c3_18a')]
                if not (c3_18a is None or c3_18a == ''):
                    self.printWarning('c3_18a', i, row, headers, child_defaultFill)
                c3_18b = row[headers.index('c3_18b')]
                if not (c3_18b is None or c3_18b == ''):
                    self.printWarning('c3_18b', i, row, headers, child_defaultFill)
                c3_19a = row[headers.index('c3_19a')]
                if not (c3_19a is None or c3_19a == ''):
                    self.printWarning('c3_19a', i, row, headers, child_defaultFill)
                c3_19b = row[headers.index('c3_19b')]
                if not (c3_19b is None or c3_19b == ''):
                    self.printWarning('c3_19b', i, row, headers, child_defaultFill)
            c3_20 = row[headers.index('c3_20')]
            if c1_15 == '1' or c1_26 == '2' or c3_20 != '1':
                c3_21a = row[headers.index('c3_21a')]
                if not (c3_21a is None or c3_21a == ''):
                    self.printWarning('c3_21a', i, row, headers, child_defaultFill)
                c3_21b = row[headers.index('c3_21b')]
                if not (c3_21b is None or c3_21b == ''):
                    self.printWarning('c3_21b', i, row, headers, child_defaultFill)
                c3_22a = row[headers.index('c3_22a')]
                if not (c3_22a is None or c3_22a == ''):
                    self.printWarning('c3_22a', i, row, headers, child_defaultFill)
                c3_22b = row[headers.index('c3_22b')]
                if not (c3_22b is None or c3_22b == ''):
                    self.printWarning('c3_22b', i, row, headers, child_defaultFill)
            c3_26 = row[headers.index('c3_26')]
            if c1_15 == '1' or c1_26 == '2' or c3_26 != '1':
                c3_27a = row[headers.index('c3_27a')]
                if not (c3_27a is None or c3_27a == ''):
                    self.printWarning('c3_27a', i, row, headers, child_defaultFill)
                c3_27b = row[headers.index('c3_27b')]
                if not (c3_27b is None or c3_27b == ''):
                    self.printWarning('c3_27b', i, row, headers, child_defaultFill)
                c3_28a = row[headers.index('c3_28a')]
                if not (c3_28a is None or c3_28a == ''):
                    self.printWarning('c3_28a', i, row, headers, child_defaultFill)
                c3_28b = row[headers.index('c3_28b')]
                if not (c3_28b is None or c3_28b == ''):
                    self.printWarning('c3_28b', i, row, headers, child_defaultFill)
            c3_29 = row[headers.index('c3_29')]
            if c1_15 == '1' or c1_26 == '2' or c3_29 != '1':
                c3_30a = row[headers.index('c3_30a')]
                if not (c3_30a is None or c3_30a == ''):
                    self.printWarning('c3_30a', i, row, headers, child_defaultFill)
                c3_30b = row[headers.index('c3_30b')]
                if not (c3_30b is None or c3_30b == ''):
                    self.printWarning('c3_30b', i, row, headers, child_defaultFill)
                c3_31a = row[headers.index('c3_31a')]
                if not (c3_31a is None or c3_31a == ''):
                    self.printWarning('c3_31a', i, row, headers, child_defaultFill)
                c3_31b = row[headers.index('c3_31b')]
                if not (c3_31b is None or c3_31b == ''):
                    self.printWarning('c3_31b', i, row, headers, child_defaultFill)
            c3_36 = row[headers.index('c3_36')]
            if c1_15 == '1' or c1_26 == '2' or c3_36 != '1':
                c3_37 = row[headers.index('c3_37')]
                if not (c3_37 is None or c3_37 == ''):
                    self.printWarning('c3_37', i, row, headers, child_defaultFill)
            c3_42 = row[headers.index('c3_42')]
            if c1_15 == '1' or c1_26 == '2' or c3_42 != '1':
                c3_43 = row[headers.index('c3_43')]
                if not (c3_43 is None or c3_43 == ''):
                    self.printWarning('c3_43', i, row, headers, child_defaultFill)
            c3_44 = row[headers.index('c3_44')]
            if c1_15 == '1' or c1_26 == '2' or c3_44 != '1':
                c3_45a = row[headers.index('c3_45a')]
                if not (c3_45a is None or c3_45a == ''):
                    self.printWarning('c3_45a', i, row, headers, child_defaultFill)
                c3_45b = row[headers.index('c3_45b')]
                if not (c3_45b is None or c3_45b == ''):
                    self.printWarning('c3_45b', i, row, headers, child_defaultFill)
            if c1_26 == '2':
                c2_01_1 = row[headers.index('c2_01_1')]
                if not (c2_01_1 is None or c2_01_1 == ''):
                    self.printWarning('c2_01_1', i, row, headers, child_defaultFill)
                c2_01_10 = row[headers.index('c2_01_10')]
                if not (c2_01_10 is None or c2_01_10 == ''):
                    self.printWarning('c2_01_10', i, row, headers, child_defaultFill)
                c2_01_11 = row[headers.index('c2_01_11')]
                if not (c2_01_11 is None or c2_01_11 == ''):
                    self.printWarning('c2_01_11', i, row, headers, child_defaultFill)
                c2_01_12 = row[headers.index('c2_01_12')]
                if not (c2_01_12 is None or c2_01_12 == ''):
                    self.printWarning('c2_01_12', i, row, headers, child_defaultFill)
                c2_01_13 = row[headers.index('c2_01_13')]
                if not (c2_01_13 is None or c2_01_13 == ''):
                    self.printWarning('c2_01_13', i, row, headers, child_defaultFill)
                c2_01_14 = row[headers.index('c2_01_14')]
                if not (c2_01_14 is None or c2_01_14 == ''):
                    self.printWarning('c2_01_14', i, row, headers, child_defaultFill)
                c2_01_2 = row[headers.index('c2_01_2')]
                if not (c2_01_2 is None or c2_01_2 == ''):
                    self.printWarning('c2_01_2', i, row, headers, child_defaultFill)
                c2_01_3 = row[headers.index('c2_01_3')]
                if not (c2_01_3 is None or c2_01_3 == ''):
                    self.printWarning('c2_01_3', i, row, headers, child_defaultFill)
                c2_01_4 = row[headers.index('c2_01_4')]
                if not (c2_01_4 is None or c2_01_4 == ''):
                    self.printWarning('c2_01_4', i, row, headers, child_defaultFill)
                c2_01_5 = row[headers.index('c2_01_5')]
                if not (c2_01_5 is None or c2_01_5 == ''):
                    self.printWarning('c2_01_5', i, row, headers, child_defaultFill)
                c2_01_6 = row[headers.index('c2_01_6')]
                if not (c2_01_6 is None or c2_01_6 == ''):
                    self.printWarning('c2_01_6', i, row, headers, child_defaultFill)
                c2_01_7 = row[headers.index('c2_01_7')]
                if not (c2_01_7 is None or c2_01_7 == ''):
                    self.printWarning('c2_01_7', i, row, headers, child_defaultFill)
                c2_01_8 = row[headers.index('c2_01_8')]
                if not (c2_01_8 is None or c2_01_8 == ''):
                    self.printWarning('c2_01_8', i, row, headers, child_defaultFill)
                c2_01_9 = row[headers.index('c2_01_9')]
                if not (c2_01_9 is None or c2_01_9 == ''):
                    self.printWarning('c2_01_9', i, row, headers, child_defaultFill)
                c2_02a = row[headers.index('c2_02a')]
                if not (c2_02a is None or c2_02a == ''):
                    self.printWarning('c2_02a', i, row, headers, child_defaultFill)
                c2_02b = row[headers.index('c2_02b')]
                if not (c2_02b is None or c2_02b == ''):
                    self.printWarning('c2_02b', i, row, headers, child_defaultFill)
                c2_03 = row[headers.index('c2_03')]
                if not (c2_03 is None or c2_03 == ''):
                    self.printWarning('c2_03', i, row, headers, child_defaultFill)
                c2_04 = row[headers.index('c2_04')]
                if not (c2_04 is None or c2_04 == ''):
                    self.printWarning('c2_04', i, row, headers, child_defaultFill)
                c2_05a = row[headers.index('c2_05a')]
                if not (c2_05a is None or c2_05a == ''):
                    self.printWarning('c2_05a', i, row, headers, child_defaultFill)
                c2_05b = row[headers.index('c2_05b')]
                if not (c2_05b is None or c2_05b == '' or c2_05b == '0'):
                    self.printWarning('c2_05b', i, row, headers, child_defaultFill)
                c2_06 = row[headers.index('c2_06')]
                if not (c2_06 is None or c2_06 == ''):
                    self.printWarning('c2_06', i, row, headers, child_defaultFill)
                c2_08a = row[headers.index('c2_08a')]
                if not (c2_08a is None or c2_08a == ''):
                    self.printWarning('c2_08a', i, row, headers, child_defaultFill)
                c2_08b = row[headers.index('c2_08b')]
                if not (c2_08b is None or c2_08b == ''):
                    self.printWarning('c2_08b', i, row, headers, child_defaultFill)
                c2_09 = row[headers.index('c2_09')]
                if not (c2_09 is None or c2_09 == ''):
                    self.printWarning('c2_09', i, row, headers, child_defaultFill)
                c2_10a = row[headers.index('c2_10a')]
                if not (c2_10a is None or c2_10a == ''):
                    self.printWarning('c2_10a', i, row, headers, child_defaultFill)
                c2_10b = row[headers.index('c2_10b')]
                if not (c2_10b is None or c2_10b == ''):
                    self.printWarning('c2_10b', i, row, headers, child_defaultFill)
                c2_11 = row[headers.index('c2_11')]
                if not (c2_11 is None or c2_11 == ''):
                    self.printWarning('c2_11', i, row, headers, child_defaultFill)
                c2_13a = row[headers.index('c2_13a')]
                if not (c2_13a is None or c2_13a == ''):
                    self.printWarning('c2_13a', i, row, headers, child_defaultFill)
                c2_13b = row[headers.index('c2_13b')]
                if not (c2_13b is None or c2_13b == ''):
                    self.printWarning('c2_13b', i, row, headers, child_defaultFill)
                c2_14 = row[headers.index('c2_14')]
                if not (c2_14 is None or c2_14 == ''):
                    self.printWarning('c2_14', i, row, headers, child_defaultFill)
                c2_15a = row[headers.index('c2_15a')]
                if not (c2_15a is None or c2_15a == ''):
                    self.printWarning('c2_15a', i, row, headers, child_defaultFill)
                c2_15b = row[headers.index('c2_15b')]
                if not (c2_15b is None or c2_15b == ''):
                    self.printWarning('c2_15b', i, row, headers, child_defaultFill)
                c2_17 = row[headers.index('c2_17')]
                if not (c2_17 is None or c2_17 == ''):
                    self.printWarning('c2_017', i, row, headers, child_defaultFill)
                c2_18 = row[headers.index('c2_18')]
                if not (c2_18 is None or c2_18 == ''):
                    self.printWarning('c2_18', i, row, headers, child_defaultFill)
            c2_06 = row[headers.index('c2_06')]
            if c1_26 == '2' or c2_06 == '2':
                c2_07 = row[headers.index('c2_07')]
                if not (c2_07 is None or c2_07 == ''):
                    self.printWarning('c2_07', i, row, headers, child_defaultFill)
            c2_11 = row[headers.index('c2_11')]
            if c1_26 == '2' or c2_11 != '1':
                c2_12 = row[headers.index('c2_12')]
                if not (c2_12 is None or c2_12 == ''):
                    self.printWarning('c2_12', i, row, headers, child_defaultFill)
            c5_01 = row[headers.index('c5_01')]
            if c5_01 != '1':
                c5_02_1 = row[headers.index('c5_02_1')]
                if not (c5_02_1 is None or c5_02_1 == '' or c5_02_1 == '0'):
                    self.printWarning('c5_02_1', i, row, headers, child_defaultFill)
                c5_02_10 = row[headers.index('c5_02_10')]
                if not (c5_02_10 is None or c5_02_10 == '' or c5_02_10 == '0'):
                    self.printWarning('c5_02_10', i, row, headers, child_defaultFill)
                c5_02_11a = row[headers.index('c5_02_11a')]
                if not (c5_02_11a is None or c5_02_11a == '' or c5_02_11a == '0'):
                    self.printWarning('c5_02_11a', i, row, headers, child_defaultFill)
                # not in electronic version
                # c5_02_11b = row[headers.index('c5_02_11b')]
                #                 if not (c5_02_11b is None or c5_02_11b == ''):
                #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable c5_02_11b should be blank, setting to default and continuing' % (i+2, headers.index('c5_02_11b'))
                #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                     c5_02_11b')] = str(child_defaultFill.get(''))
                c5_02_12 = row[headers.index('c5_02_12')]
                if not (c5_02_12 is None or c5_02_12 == '' or c5_02_12 == '0'):
                    self.printWarning('c5_02_12', i, row, headers, child_defaultFill)
                c5_02_13 = row[headers.index('c5_02_13')]
                if not (c5_02_13 is None or c5_02_13 == '' or c5_02_13 == '0'):
                    self.printWarning('c5_02_13', i, row, headers, child_defaultFill)
                c5_02_14 = row[headers.index('c5_02_14')]
                if not (c5_02_14 is None or c5_02_14 == '' or c5_02_14 == '0'):
                    self.printWarning('c5_02_14', i, row, headers, child_defaultFill)
                c5_02_2 = row[headers.index('c5_02_2')]
                if not (c5_02_2 is None or c5_02_2 == '' or c5_02_2 == '0'):
                    self.printWarning('c5_02_2', i, row, headers, child_defaultFill)
                c5_02_3 = row[headers.index('c5_02_3')]
                if not (c5_02_3 is None or c5_02_3 == '' or c5_02_3 == '0'):
                    self.printWarning('c5_02_3', i, row, headers, child_defaultFill)
                c5_02_4 = row[headers.index('c5_02_4')]
                if not (c5_02_4 is None or c5_02_4 == '' or c5_02_4 == '0'):
                    self.printWarning('c5_02_4', i, row, headers, child_defaultFill)
                c5_02_5 = row[headers.index('c5_02_5')]
                if not (c5_02_5 is None or c5_02_5 == '' or c5_02_5 == '0'):
                    self.printWarning('c5_02_5', i, row, headers, child_defaultFill)
                c5_02_6 = row[headers.index('c5_02_6')]
                if not (c5_02_6 is None or c5_02_6 == '' or c5_02_6 == '0'):
                    self.printWarning('c5_02_6', i, row, headers, child_defaultFill)
                c5_02_7 = row[headers.index('c5_02_7')]
                if not (c5_02_7 is None or c5_02_7 == '' or c5_02_7 == '0'):
                    self.printWarning('c5_02_1', i, row, headers, child_defaultFill)
                c5_02_8 = row[headers.index('c5_02_7')]
                if not (c5_02_8 is None or c5_02_8 == '' or c5_02_8 == '0'):
                    self.printWarning('c5_02_8', i, row, headers, child_defaultFill)
                c5_02_9 = row[headers.index('c5_02_9')]
                if not (c5_02_9 is None or c5_02_9 == '' or c5_02_9 == '0'):
                    self.printWarning('c5_02_9', i, row, headers, child_defaultFill)
                c5_03 = row[headers.index('c5_03')]
                if not (c5_03 is None or c5_03 == ''):
                    self.printWarning('c5_03', i, row, headers, child_defaultFill)
            c5_04 = row[headers.index('c5_04')]
            if c5_04 != '1':
                c5_05 = row[headers.index('c5_05')]
                if not (c5_05 is None or c5_05 == ''):
                    self.printWarning('c5_05', i, row, headers, child_defaultFill)
            c5_05 = row[headers.index('c5_05')]
            if c5_05 != '1':
                c5_06_1d = row[headers.index('c5_06_1d')]
                if not (c5_06_1d is None or c5_06_1d == ''):
                    self.printWarning('c5_06_1d', i, row, headers, child_defaultFill)
                c5_06_1m = row[headers.index('c5_06_1m')]
                if not (c5_06_1m is None or c5_06_1m == ''):
                    self.printWarning('c5_06_1m', i, row, headers, child_defaultFill)
                c5_06_1y = row[headers.index('c5_06_1y')]
                if not (c5_06_1y is None or c5_06_1y == ''):
                    self.printWarning('c5_06_1y', i, row, headers, child_defaultFill)
                c5_06_2d = row[headers.index('c5_06_2d')]
                if not (c5_06_2d is None or c5_06_2d == ''):
                    self.printWarning('c5_06_2d', i, row, headers, child_defaultFill)
                c5_06_2m = row[headers.index('c5_06_2m')]
                if not (c5_06_2m is None or c5_06_2m == ''):
                    self.printWarning('c5_06_2m', i, row, headers, child_defaultFill)
                c5_06_2y = row[headers.index('c5_06_2y')]
                if not (c5_06_2y is None or c5_06_2y == ''):
                    self.printWarning('c5_06_2y', i, row, headers, child_defaultFill)
                c5_07_1a = row[headers.index('c5_07_1a')]
                if not (c5_07_1a is None or c5_07_1a == ''):
                    self.printWarning('c5_07_1a', i, row, headers, child_defaultFill)
                c5_07_2a = row[headers.index('c5_07_2a')]
                if not (c5_07_2a is None or c5_07_2a == ''):
                    self.printWarning('c5_07_2a', i, row, headers, child_defaultFill)
                c5_08d = None
                if 'c5_08d' in headers:
                    c5_08d = row[headers.index('c5_08d')]
                if not (c5_08d is None or c5_08d == ''):
                    self.printWarning('c5_08d', i, row, headers, child_defaultFill)
                c5_08m = None
                if 'c5_08m' in headers:
                    c5_08m = row[headers.index('c5_08m')]
                if not (c5_08m is None or c5_08m == ''):
                    self.printWarning('c5_08m', i, row, headers, child_defaultFill)
                c5_08y = None
                if 'c5_08y' in headers:
                    c5_08y = row[headers.index('c5_08y')]
                if not (c5_08y is None or c5_08y == ''):
                    self.printWarning('c5_08y', i, row, headers, child_defaultFill)
                c5_09 = row[headers.index('c5_09')]
                if not (c5_09 is None or c5_09 == ''):
                    self.printWarning('c5_09', i, row, headers, child_defaultFill)
            c5_10 = row[headers.index('c5_10')]
            if c5_10 != '1':
                c5_11 = row[headers.index('c5_11')]
                if not (c5_11 is None or c5_11 == ''):
                    self.printWarning('c5_11', i, row, headers, child_defaultFill)
            c5_11 = row[headers.index('c5_11')]
            if c5_10 != '1' or c5_11 != '1':
                c5_12 = row[headers.index('c5_12')]
                if not (c5_12 is None or c5_12 == ''):
                    self.printWarning('c5_12', i, row, headers, child_defaultFill)
                c5_13 = row[headers.index('c5_13')]
                if not (c5_13 is None or c5_13 == ''):
                    self.printWarning('c5_13', i, row, headers, child_defaultFill)
                c5_14 = row[headers.index('c5_14')]
                if not (c5_14 is None or c5_14 == ''):
                    self.printWarning('c5_14', i, row, headers, child_defaultFill)
                c5_15 = row[headers.index('c5_15')]
                if not (c5_15 is None or c5_15 == ''):
                    self.printWarning('c5_15', i, row, headers, child_defaultFill)
                c5_16 = row[headers.index('c5_16')]
                if not (c5_16 is None or c5_16 == ''):
                    self.printWarning('c5_16', i, row, headers, child_defaultFill)
            c5_17 = row[headers.index('c5_17')]
            if c5_17 != '1':
                c5_18 = row[headers.index('c5_18')]
                if not (c5_18 is None or c5_18 == ''):
                    self.printWarning('c5_18', i, row, headers, child_defaultFill)
            # general vars
            # not in electronic version
            # g1_07a = row[headers.index('g1_07a')]
            #             if g1_07a < '12' or g1_07a == '999':
            #                 g1_08 = row[headers.index('g1_08')]
            #                 if not (g1_08 is None or g1_08 == ''):
            #                     updatestr = 'Child :: WARNING: value at row %s col %s for variable g1_08 should be blank, setting to default and continuing' % (i+2, headers.index('g1_08'))
            #                     wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
            #        warning_logger.warning(updatestr)
            #                     g1_08')] = str(child_defaultFill.get(''))
            g5_04a = row[headers.index('g5_04a')]
            if g5_04a is not None and g5_04a != '':
                g5_04a = int(g5_04a)
            else:
                g5_04a = 0
            if g5_04a < 12 or g5_04a == 999:
                g5_05 = row[headers.index('g5_05')]
                if not (g5_05 is None or g5_05 == ''):
                    self.printWarning('g5_05', i, row, headers, child_defaultFill)
            if g5_04a < 5 or g5_04a == 999:
                g5_06a = row[headers.index('g5_06a')]
                if not (g5_06a is None or g5_06a == ''):
                    self.printWarning('g5_06a', i, row, headers, child_defaultFill)
                # not in electronic version
                # g5_06b = row[headers.index('g5_06b')]
                #                if not (g5_06b is None or g5_06b == ''):
                #                    updatestr = 'Child :: WARNING: value at row %s col %s for variable g5_06b should be blank, setting to default and continuing' % (i+2, headers.index('g5_06b'))
                #                    wx.PostEvent(self._notify_window, workerthread.ResultEvent(updatestr))
                #    warning_logger.warning(updatestr)
                #                    g5_06b = str(child_defaultFill.get(''))

            # added for short form
            if c5_04 != '1' or c5_05 != 1:
                c5_07_1b = row[headers.index('c5_07_1b')]
                if not (c5_07_1b is None or c5_07_1b == ''):
                    self.printWarning('c5_07_1b', i, row, headers, child_defaultFill)
                c5_07_2b = row[headers.index('c5_07_2b')]
                if not (c5_07_2b is None or c5_07_2b == ''):
                    self.printWarning('c5_07_2b', i, row, headers, child_defaultFill)

        # special case: 'child_4_50b' should be set to 1000 if it's missing
        for row in matrix:
            if row[headers.index('child_4_50b')] == '' or row[headers.index('child_4_50b')] is None:
                row[headers.index('child_4_50b')] = 1000

        if not self.warnings:
            status_logger.debug('Child :: Answers verified')
        else:
            status_logger.info('Child :: Warnings found, please check warnings.txt')

        # fill in missing values:
        status_logger.debug('Child :: Filling in default values for empty columns')
        for row in matrix:
            for i, col in enumerate(row):
                header = headers[i]
                default = child_defaultFill.get(header)
                if default is not None and col == '':
                    row[i] = child_defaultFill[header]

        status_logger.debug('Child :: Analyzing free text')

        if self.shortform:
            for row in matrix:
                if row[headers_old.index('child_6_1')] == '1':
                    self.processFreeText('abdomen', row, headers)
                if row[headers_old.index('child_6_2')] == '1':
                    self.processFreeText('cancer', row, headers)
                if row[headers_old.index('child_6_3')] == '1':
                    self.processFreeText('pox', row, headers)
                if row[headers_old.index('child_6_4')] == '1':
                    self.processFreeText('deyhdration', row, headers)
                if row[headers_old.index('child_6_5')] == '1':
                    self.processFreeText('dengue', row, headers)
                if row[headers_old.index('child_6_6')] == '1':
                    self.processFreeText('diarrhea', row, headers)
                if row[headers_old.index('child_6_7')] == '1':
                    self.processFreeText('fever', row, headers)
                if row[headers_old.index('child_6_8')] == '1':
                    self.processFreeText('heart', row, headers)
                if row[headers_old.index('child_6_9')] == '1':
                    self.processFreeText('jaundice', row, headers)
                if row[headers_old.index('child_6_10')] == '1':
                    self.processFreeText('pneumonia', row, headers)
                if row[headers_old.index('child_6_11')] == '1':
                    self.processFreeText('rash', row, headers)

        freeText = ['c5_09', 'c5_12', 'c5_13', 'c5_14', 'c5_15', 'c5_16', 'c6_01']

        # TODO - fix unused variable
        keyWords = child_wordsToVars.keys()

        # we've already lowercased and removed numbers at this point
        for question in freeText:
            index = headers.index(question)
            for row in matrix:
                answer = row[index]
                self.processFreeText(answer, row, headers)

        # now do the calculations for the generated variables:
        for row in matrix:
            index = headers.index('g4_03b')
            if row[headers.index('g4_03a')] == '11':
                row[index] = row[headers_old.index('gen_4_3a')]
            elif row[headers.index('g4_03a')] == '12':
                row[index] = row[headers_old.index('gen_4_3b')]
            elif row[headers.index('g4_03a')] == '13':
                row[index] = row[headers_old.index('gen_4_3c')]

            index = headers.index('c1_05b')
            if row[headers.index('c1_05a')] == '4':
                row[index] = row[headers_old.index('child_1_5a')]
            if row[headers.index('c1_05a')] == '2':
                row[index] = row[headers_old.index('child_1_5b')]

            index = headers.index('c1_20b')
            if row[headers.index('c1_20a')] == '4':
                row[index] = row[headers_old.index('child_1_20a')]
            if row[headers.index('c1_20a')] == '2':
                row[index] = row[headers_old.index('child_1_20b')]
            if row[headers.index('c1_20a')] == '1':
                row[index] = row[headers_old.index('child_1_20c')]

            index = headers.index('c1_21b')
            if row[headers.index('c1_21a')] == '4':
                row[index] = row[headers_old.index('child_1_21a')]
            if row[headers.index('c1_21a')] == '2':
                row[index] = row[headers_old.index('child_1_21b')]

            index = headers.index('c2_05b')
            if row[headers.index('c2_05a')] == '5':
                row[index] = row[headers_old.index('child_2_5a')]
            if row[headers.index('c2_05a')] == '4':
                row[index] = row[headers_old.index('child_2_5a')]

            index = headers.index('c4_37b')
            if row[headers.index('c4_37a')] == '4':
                row[index] = row[headers_old.index('child_4_37a')]
            if row[headers.index('c4_37a')] == '3':
                row[index] = row[headers_old.index('child_4_37b')]

            if row[headers_old.index('child_4_47')] == '0':
                row[headers.index('c4_47_11')] = '1'

            index = headers.index('c4_49b')
            if row[headers.index('c4_49a')] == '5':
                row[index] = row[headers_old.index('child_4_50a')]
            if row[headers.index('c4_49a')] == '4':
                row[index] = row[headers_old.index('child_4_50b')]

            # fix child agedays.  if it's blank give it a 0, if it's not, give it a 4
            if row[headers.index('c1_25b')] == '' or row[headers.index('c1_25b')] is None:
                row[headers.index('c1_25a')] = '0'
            else:
                row[headers.index('c1_25a')] = '4'

        # fix duration variables
        status_logger.debug('Child :: Processing duration variables')
        durationVars = ['c1_05', 'c1_20', 'c1_21', 'c1_25', 'c2_02', 'c2_05', 'c2_10', 'c3_14', 'c3_18', 'c3_19',
                        'c3_21', 'c3_22', 'c3_27', 'c3_28', 'c3_30', 'c3_31', 'c4_02', 'c4_08', 'c4_10', 'c4_13',
                        'c4_17', 'c4_19', 'c4_33', 'c4_37', 'c4_49']

        # add duration variables
        for var in durationVars:
            headers.append(var)
            for row in matrix:
                row.append("")

        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            bindex = headers.index(b)
            index = headers.index(var)

            for row in matrix:
                value = row[bindex]
                v2 = row[aindex]

                if value == '':
                    row[index] = 0
                else:
                    row[index] = float(value)
                if row[aindex] == '1':
                    row[index] = float(row[index]) * 365.0
                if row[aindex] == '2':
                    row[index] = float(row[index]) * 30.0
                if row[aindex] == '3':
                    row[index] = float(row[index]) * 7.0
                if row[aindex] == '5':
                    row[index] = float(row[index]) / 24.0
                if row[aindex] == '6':
                    row[index] = float(row[index]) / 1440.0

        # drop old a/b variables
        # we do two loops to make sure we don't cross indexes, inefficient...
        for var in durationVars:
            a = var + 'a'
            b = var + 'b'
            aindex = headers.index(a)
            headers.remove(a)

            for row in matrix:
                del row[aindex]

            bindex = headers.index(b)
            headers.remove(b)
            for row in matrix:
                del row[bindex]

        # fix missingness coding for weight from medical record
        for row_i, row in enumerate(matrix):
            try:
                c5_07_1b = headers.index('c5_07_1b')
                c5_07_2b = headers.index('c5_07_2b')
                if row[c5_07_1b] == '0' or row[c5_07_1b] == '9999' or row[c5_07_1b] == '99' or row[c5_07_1b] == '999':
                    row[c5_07_1b] = ''
                if row[c5_07_2b] == '0' or row[c5_07_2b] == '9999' or row[c5_07_2b] == '99' or row[c5_07_2b] == '999':
                    row[c5_07_2b] = ''

                # Date of birth - clean up so you can get at least an estimated age
                g5_01d = headers.index('g5_01d')
                if row[g5_01d] == '99' or row[g5_01d] == '':
                    row[g5_01d] = 1
                g5_01m = headers.index('g5_01m')
                if row[g5_01m] == '99' or row[g5_01m] == '':
                    row[g5_01m] = 1
                g5_01y = headers.index('g5_01y')
                if row[g5_01y] == '999' or row[g5_01y] == '':
                    row[g5_01y] = 0

                # clean up medical record dates
                c5_06_1d = headers.index('c5_06_1d')
                if row[c5_06_1d] == '99' or row[c5_06_1d] == '' or row[c5_06_1d] is None:
                    row[c5_06_1d] = 1
                c5_06_1m = headers.index('c5_06_1m')
                if row[c5_06_1m] == '99' or row[c5_06_1m] == '' or row[c5_06_1m] is None:
                    row[c5_06_1m] = 1
                c5_06_1y = headers.index('c5_06_1y')
                if row[c5_06_1y] == '9999' or row[c5_06_1y] == '' or row[c5_06_1y] is None:
                    row[c5_06_1y] = 0

                c5_06_2d = headers.index('c5_06_2d')
                if row[c5_06_2d] == '99' or row[c5_06_2d] == '' or row[c5_06_2d] is None:
                    row[c5_06_2d] = 1
                c5_06_2m = headers.index('c5_06_2m')
                if row[c5_06_2m] == '99' or row[c5_06_2m] == '' or row[c5_06_2m] is None:
                    row[c5_06_2m] = 1
                c5_06_2y = headers.index('c5_06_2y')
                if row[c5_06_2y] == '9999' or row[c5_06_2y] == '' or row[c5_06_2y] is None:
                    row[c5_06_2y] = 0

                knownAge = True
                if row[g5_01y] == 0:
                    knownAge = False

                if knownAge:
                    # generate how many months after Jan 1 1960 they were born - This is a specific stata function
                    # gen mofd = mofd(mdy(c1_10m, c1_10d, c1_10y))

                    base_date = date(1960, 1, 1)
                    delta = relativedelta(date(int(row[g5_01y]), int(row[g5_01m]), int(row[g5_01d])), base_date)
                    mofd = delta.years * 12 + delta.months

                    mofm1 = -1
                    mofm2 = -1
                    if row[c5_06_1y] != 0:
                        exam1date = date(int(row[c5_06_1y]), int(row[c5_06_1m]), int(row[c5_06_1d]))
                        exam1delta = relativedelta(exam1date, base_date)
                        mofm1 = exam1delta.years * 12 + exam1delta.months

                    if row[c5_06_2y] != 0:
                        exam2date = date(int(row[c5_06_2y]), int(row[c5_06_2m]), int(row[c5_06_2d]))
                        exam2delta = relativedelta(exam2date, base_date)
                        mofm2 = exam2delta.years * 12 + exam2delta.months

                    # if row[headers.index('sid')] == '627':
                    #     print "mofm1 and mofm2 %s and %s" % (mofm1, mofm2)

                    # identify most recent medical record
                    # gen max_age = max(mofm1, mofm2)
                    max_age = max(mofm1, mofm2)

                    month = max_age - mofd

                    p = 0
                    # if row[headers.index('sid')] == '627':
                    #     print "mofm1 and mofm2 %s and %s" % (mofm1, mofm2)
                    #     print "and month = %s" % month
                    #     p = 1

                    # only keep going if they have a positive age in the right range
                    if month >= 0 and month <= 60:
                        # only child
                        weight_kg = 0
                        if max_age == mofm1 and row[headers.index('c5_07_1b')] != '':
                            weight_kg = float(row[headers.index('c5_07_1b')]) / 1000
                        elif max_age == mofm2 and row[headers.index('c5_07_2b')] != '':
                            weight_kg = float(row[headers.index('c5_07_2b')]) / 1000

                        if p == 1:
                            print "using weight %s" % weight_kg

                        # input months, output 3rd standard deviation below
                        male_sd3 = {0: 2.1, 1: 2.9, 2: 3.8, 3: 4.4, 4: 4.9, 5: 5.3, 6: 5.7, 7: 5.9, 8: 6.2, 9: 6.4,
                                    10: 6.6, 11: 6.8, 12: 6.9, 13: 7.1, 14: 7.2, 15: 7.4, 16: 7.5, 17: 7.7, 18: 7.8,
                                    19: 8, 20: 8.1, 21: 8.2, 22: 8.4, 23: 8.5, 24: 8.6, 25: 8.8, 26: 8.9, 27: 9,
                                    28: 9.1, 29: 9.2, 30: 9.4, 31: 9.5, 32: 9.6, 33: 9.7, 34: 9.8, 35: 9.9, 36: 10,
                                    37: 10.1, 38: 10.2, 39: 10.3, 40: 10.4, 41: 10.5, 42: 10.6, 43: 10.7, 44: 10.8,
                                    45: 10.9, 46: 11, 47: 11.1, 48: 11.2, 49: 11.3, 50: 11.4, 51: 11.5, 52: 11.6,
                                    53: 11.7, 54: 11.8, 55: 11.9, 56: 12, 57: 12.1, 58: 12.2, 59: 12.3, 60: 12.4}

                        female_sd3 = {0: 2, 1: 2.7, 2: 3.4, 3: 4, 4: 4.4, 5: 4.8, 6: 5.1, 7: 5.3, 8: 5.6, 9: 5.8,
                                      10: 5.9, 11: 6.1, 12: 6.3, 13: 6.4, 14: 6.6, 15: 6.7, 16: 6.9, 17: 7, 18: 7.2,
                                      19: 7.3, 20: 7.5, 21: 7.6, 22: 7.8, 23: 7.9, 24: 8.1, 25: 8.2, 26: 8.4, 27: 8.5,
                                      28: 8.6, 29: 8.8, 30: 8.9, 31: 9, 32: 9.1, 33: 9.3, 34: 9.4, 35: 9.5, 36: 9.6,
                                      37: 9.7, 38: 9.8, 39: 9.9, 40: 10.1, 41: 10.2, 42: 10.3, 43: 10.4, 44: 10.5,
                                      45: 10.6, 46: 10.7, 47: 10.8, 48: 10.9, 49: 11, 50: 11.1, 51: 11.2, 52: 11.3,
                                      53: 11.4, 54: 11.5, 55: 11.6, 56: 11.7, 57: 11.8, 58: 11.9, 59: 12, 60: 12.1}

                        male_sd2 = {0: 2.5, 1: 3.4, 2: 4.3, 3: 5, 4: 5.6, 5: 6, 6: 6.4, 7: 6.7, 8: 6.9, 9: 7.1, 10: 7.4,
                                    11: 7.6, 12: 7.7, 13: 7.9, 14: 8.1, 15: 8.3, 16: 8.4, 17: 8.6, 18: 8.8, 19: 8.9,
                                    20: 9.1, 21: 9.2, 22: 9.4, 23: 9.5, 24: 9.7, 25: 9.8, 26: 10, 27: 10.1, 28: 10.2,
                                    29: 10.4, 30: 10.5, 31: 10.7, 32: 10.8, 33: 10.9, 34: 11, 35: 11.2, 36: 11.3,
                                    37: 11.4, 38: 11.5, 39: 11.6, 40: 11.8, 41: 11.9, 42: 12, 43: 12.1, 44: 12.2,
                                    45: 12.4, 46: 12.5, 47: 12.6, 48: 12.7, 49: 12.8, 50: 12.9, 51: 13.1, 52: 13.2,
                                    53: 13.3, 54: 13.4, 55: 13.5, 56: 13.6, 57: 13.7, 58: 13.8, 59: 14, 60: 14.1}

                        female_sd2 = {0: 2.4, 1: 3.2, 2: 3.9, 3: 4.5, 4: 5, 5: 5.4, 6: 5.7, 7: 6, 8: 6.3, 9: 6.5,
                                      10: 6.7, 11: 6.9, 12: 7, 13: 7.2, 14: 7.4, 15: 7.6, 16: 7.7, 17: 7.9, 18: 8.1,
                                      19: 8.2, 20: 8.4, 21: 8.6, 22: 8.7, 23: 8.9, 24: 9, 25: 9.2, 26: 9.4, 27: 9.5,
                                      28: 9.7, 29: 9.8, 30: 10, 31: 10.1, 32: 10.3, 33: 10.4, 34: 10.5, 35: 10.7,
                                      36: 10.8, 37: 10.9, 38: 11.1, 39: 11.2, 40: 11.3, 41: 11.5, 42: 11.6, 43: 11.7,
                                      44: 11.8, 45: 12, 46: 12.1, 47: 12.2, 48: 12.3, 49: 12.4, 50: 12.6, 51: 12.7,
                                      52: 12.8, 53: 12.9, 54: 13, 55: 13.2, 56: 13.3, 57: 13.4, 58: 13.5, 59: 13.6,
                                      60: 13.7}

                        if weight_kg > 0:
                            sex = row[headers.index('g5_02')]
                            if p == 1:
                                print "wtf %s %s %s %s " % (male_sd3[month], male_sd2[month], female_sd3[month], female_sd2[month])
                                print "testing %s" % (weight_kg < male_sd3[month])
                                print "sex ? %s" % sex

                            if sex == '1':
                                if weight_kg < male_sd3[month]:
                                    row[headers.index('s180')] = 1
                                if weight_kg < male_sd2[month]:
                                    row[headers.index('s181')] = 1
                            elif sex == '2':
                                if weight_kg < female_sd3[month]:
                                    row[headers.index('s180')] = 1
                                if weight_kg < female_sd2[month]:
                                    row[headers.index('s181')] = 1
            except ValueError as e:
                # TODO - Fix this mess.
                updatestr = 'Error in row: %s' % (row_i + 2)  # python starts on 0, excel starts on 1, excel first row is headers
                updatestr = updatestr + e.message
                warning_logger.warning(updatestr)
                import sys
                exc_info = sys.exc_info()
                raise exc_info[1], None, exc_info[2]

        childwriter.writerow(headers)

        for row in matrix:
            childwriter.writerow(row)

        return 1

    def abort(self):
        self.want_abort = 1

    def processFreeText(self, answer, row, headers):
        keyWords = child_wordsToVars.keys()
        answerArray = answer.split(' ')
        for word in answerArray:
            for keyword in keyWords:
                stemmed = stem(word)
                if stemmed == keyword:
                    svar = child_wordsToVars[keyword]
                    sindex = headers.index(svar)
                    row[sindex] = '1'

    def printWarning(self, var, row_num, row, headers, child_defaultFill):
        updatestr = 'Child :: Value at row %s col %s for variable %s should be blank, setting to default and continuing' % (row_num + 2, headers.index(var), var)
        warning_logger.warning(updatestr)
        row[headers.index(var)] = str(child_defaultFill.get(var))
        self.warnings = True
